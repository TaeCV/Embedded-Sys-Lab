
Lab2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b04  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001c9c  08001c9c  00011c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cb4  08001cb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001cb4  08001cb4  00011cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cbc  08001cbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cbc  08001cbc  00011cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08001cd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001cd0  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a00  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012b1  00000000  00000000  00027a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00028cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  000292f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014820  00000000  00000000  00029898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074ba  00000000  00000000  0003e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000817f4  00000000  00000000  00045572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c6d66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a0  00000000  00000000  000c6dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001c84 	.word	0x08001c84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001c84 	.word	0x08001c84

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9ec 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f80e 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f89e 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f872 	bl	80005c8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80004e4:	2120      	movs	r1, #32
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <main+0x24>)
 80004e8:	f000 fcfb 	bl	8000ee2 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80004ec:	20c8      	movs	r0, #200	; 0xc8
 80004ee:	f000 fa51 	bl	8000994 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80004f2:	e7f7      	b.n	80004e4 <main+0x14>
 80004f4:	40020000 	.word	0x40020000

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fbb4 	bl	8001c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <SystemClock_Config+0xc8>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a26      	ldr	r2, [pc, #152]	; (80005c0 <SystemClock_Config+0xc8>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <SystemClock_Config+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <SystemClock_Config+0xcc>)
 8000542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <SystemClock_Config+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800056c:	2332      	movs	r3, #50	; 0x32
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fccb 	bl	8000f18 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 f8b6 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 ff2d 	bl	8001408 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005b4:	f000 f8a0 	bl	80006f8 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	; 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MX_USART2_UART_Init+0x50>)
 80005d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 80005d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 80005ee:	220c      	movs	r2, #12
 80005f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_USART2_UART_Init+0x4c>)
 8000600:	f001 f8fe 	bl	8001800 <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800060a:	f000 f875 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000028 	.word	0x20000028
 8000618:	40004400 	.word	0x40004400

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <MX_GPIO_Init+0xd0>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_GPIO_Init+0xd0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_GPIO_Init+0xd0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	4812      	ldr	r0, [pc, #72]	; (80006f0 <MX_GPIO_Init+0xd4>)
 80006a8:	f000 fc02 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_GPIO_Init+0xd8>)
 80006c4:	f000 fa70 	bl	8000ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_GPIO_Init+0xd4>)
 80006e0:	f000 fa62 	bl	8000ba8 <HAL_GPIO_Init>

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020800 	.word	0x40020800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <HAL_MspInit+0x4c>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6453      	str	r3, [r2, #68]	; 0x44
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x4c>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000742:	2007      	movs	r0, #7
 8000744:	f000 f9fc 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <HAL_UART_MspInit+0x84>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d12b      	bne.n	80007ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_UART_MspInit+0x88>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <HAL_UART_MspInit+0x88>)
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_UART_MspInit+0x88>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_UART_MspInit+0x88>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <HAL_UART_MspInit+0x88>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_UART_MspInit+0x88>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ae:	230c      	movs	r3, #12
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007be:	2307      	movs	r3, #7
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 80007ca:	f000 f9ed 	bl	8000ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <NMI_Handler+0x4>

080007ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <MemManage_Handler+0x4>

080007f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <UsageFault_Handler+0x4>

08000802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000830:	f000 f890 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <SystemInit+0x20>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <SystemInit+0x20>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800085c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000862:	490e      	ldr	r1, [pc, #56]	; (800089c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000878:	4c0b      	ldr	r4, [pc, #44]	; (80008a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000886:	f7ff ffd7 	bl	8000838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f001 f9cf 	bl	8001c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088e:	f7ff fe1f 	bl	80004d0 <main>
  bx  lr    
 8000892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a0:	08001cc4 	.word	0x08001cc4
  ldr r2, =_sbss
 80008a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a8:	20000070 	.word	0x20000070

080008ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <HAL_Init+0x40>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_Init+0x40>)
 80008c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_Init+0x40>)
 80008d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f931 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff ff0e 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023c00 	.word	0x40023c00

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f93b 	bl	8000b8e <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 f911 	bl	8000b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008
 8000978:	2000006c 	.word	0x2000006c

0800097c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	2000006c 	.word	0x2000006c

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff ffee 	bl	800097c <HAL_GetTick>
 80009a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ba:	bf00      	nop
 80009bc:	f7ff ffde 	bl	800097c <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	; 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f7ff ff8e 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff47 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff5c 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff8e 	bl	8000a94 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffb0 	bl	8000afc <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	e159      	b.n	8000e78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f040 8148 	bne.w	8000e72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d005      	beq.n	8000bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d130      	bne.n	8000c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	091b      	lsrs	r3, r3, #4
 8000c46:	f003 0201 	and.w	r2, r3, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d017      	beq.n	8000c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d123      	bne.n	8000cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	69b9      	ldr	r1, [r7, #24]
 8000ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0203 	and.w	r2, r3, #3
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80a2 	beq.w	8000e72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b57      	ldr	r3, [pc, #348]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a56      	ldr	r2, [pc, #344]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4a:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <HAL_GPIO_Init+0x2ec>)
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a49      	ldr	r2, [pc, #292]	; (8000e98 <HAL_GPIO_Init+0x2f0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x202>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a48      	ldr	r2, [pc, #288]	; (8000e9c <HAL_GPIO_Init+0x2f4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x1fe>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a47      	ldr	r2, [pc, #284]	; (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x1fa>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a46      	ldr	r2, [pc, #280]	; (8000ea4 <HAL_GPIO_Init+0x2fc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x1f6>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a45      	ldr	r2, [pc, #276]	; (8000ea8 <HAL_GPIO_Init+0x300>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x1f2>
 8000d96:	2304      	movs	r3, #4
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000daa:	2300      	movs	r3, #0
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	f002 0203 	and.w	r2, r2, #3
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dbc:	4935      	ldr	r1, [pc, #212]	; (8000e94 <HAL_GPIO_Init+0x2ec>)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dee:	4a2f      	ldr	r2, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e18:	4a24      	ldr	r2, [pc, #144]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e42:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_GPIO_Init+0x304>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3301      	adds	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	f67f aea2 	bls.w	8000bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40013800 	.word	0x40013800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40013c00 	.word	0x40013c00

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ef4:	887a      	ldrh	r2, [r7, #2]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	041a      	lsls	r2, r3, #16
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	400b      	ands	r3, r1
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e264      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d075      	beq.n	8001022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f36:	4ba3      	ldr	r3, [pc, #652]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d00c      	beq.n	8000f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f42:	4ba0      	ldr	r3, [pc, #640]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d112      	bne.n	8000f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f4e:	4b9d      	ldr	r3, [pc, #628]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f5a:	d10b      	bne.n	8000f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5c:	4b99      	ldr	r3, [pc, #612]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d05b      	beq.n	8001020 <HAL_RCC_OscConfig+0x108>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d157      	bne.n	8001020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e23f      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7c:	d106      	bne.n	8000f8c <HAL_RCC_OscConfig+0x74>
 8000f7e:	4b91      	ldr	r3, [pc, #580]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a90      	ldr	r2, [pc, #576]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e01d      	b.n	8000fc8 <HAL_RCC_OscConfig+0xb0>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x98>
 8000f96:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a8a      	ldr	r2, [pc, #552]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b88      	ldr	r3, [pc, #544]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a87      	ldr	r2, [pc, #540]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0xb0>
 8000fb0:	4b84      	ldr	r3, [pc, #528]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a83      	ldr	r2, [pc, #524]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b81      	ldr	r3, [pc, #516]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a80      	ldr	r2, [pc, #512]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fcd4 	bl	800097c <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fcd0 	bl	800097c <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e204      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b76      	ldr	r3, [pc, #472]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xc0>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcc0 	bl	800097c <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fcbc 	bl	800097c <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1f0      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	4b6c      	ldr	r3, [pc, #432]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0xe8>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d063      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800102e:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103a:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001042:	2b08      	cmp	r3, #8
 8001044:	d11c      	bne.n	8001080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001046:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	4b5c      	ldr	r3, [pc, #368]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x152>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e1c4      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4952      	ldr	r1, [pc, #328]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e03a      	b.n	80010f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_OscConfig+0x2b0>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108e:	f7ff fc75 	bl	800097c <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fc71 	bl	800097c <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e1a5      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4940      	ldr	r1, [pc, #256]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_RCC_OscConfig+0x2b0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc54 	bl	800097c <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc50 	bl	800097c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e184      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d030      	beq.n	8001164 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d016      	beq.n	8001138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_RCC_OscConfig+0x2b4>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001110:	f7ff fc34 	bl	800097c <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fc30 	bl	800097c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e164      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x200>
 8001136:	e015      	b.n	8001164 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_RCC_OscConfig+0x2b4>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff fc1d 	bl	800097c <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001146:	f7ff fc19 	bl	800097c <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e14d      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f0      	bne.n	8001146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80a0 	beq.w	80012b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_RCC_OscConfig+0x2b8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d121      	bne.n	80011f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_RCC_OscConfig+0x2b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_RCC_OscConfig+0x2b8>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fbdf 	bl	800097c <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	e011      	b.n	80011e6 <HAL_RCC_OscConfig+0x2ce>
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	42470000 	.word	0x42470000
 80011cc:	42470e80 	.word	0x42470e80
 80011d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d4:	f7ff fbd2 	bl	800097c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e106      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b85      	ldr	r3, [pc, #532]	; (80013fc <HAL_RCC_OscConfig+0x4e4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x2f0>
 80011fa:	4b81      	ldr	r3, [pc, #516]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a80      	ldr	r2, [pc, #512]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
 8001206:	e01c      	b.n	8001242 <HAL_RCC_OscConfig+0x32a>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0x312>
 8001210:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	4a7a      	ldr	r2, [pc, #488]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6713      	str	r3, [r2, #112]	; 0x70
 800121c:	4b78      	ldr	r3, [pc, #480]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001220:	4a77      	ldr	r2, [pc, #476]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6713      	str	r3, [r2, #112]	; 0x70
 8001228:	e00b      	b.n	8001242 <HAL_RCC_OscConfig+0x32a>
 800122a:	4b75      	ldr	r3, [pc, #468]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	4a74      	ldr	r2, [pc, #464]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6713      	str	r3, [r2, #112]	; 0x70
 8001236:	4b72      	ldr	r3, [pc, #456]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123a:	4a71      	ldr	r2, [pc, #452]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d015      	beq.n	8001276 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff fb97 	bl	800097c <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fb93 	bl	800097c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0c5      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ee      	beq.n	8001252 <HAL_RCC_OscConfig+0x33a>
 8001274:	e014      	b.n	80012a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7ff fb81 	bl	800097c <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff fb7d 	bl	800097c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e0af      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	4b5a      	ldr	r3, [pc, #360]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1ee      	bne.n	800127e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d105      	bne.n	80012b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a6:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a55      	ldr	r2, [pc, #340]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 80012ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 809b 	beq.w	80013f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012bc:	4b50      	ldr	r3, [pc, #320]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d05c      	beq.n	8001382 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d141      	bne.n	8001354 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d0:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <HAL_RCC_OscConfig+0x4ec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb51 	bl	800097c <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012de:	f7ff fb4d 	bl	800097c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e081      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f0      	bne.n	80012de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69da      	ldr	r2, [r3, #28]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	3b01      	subs	r3, #1
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	061b      	lsls	r3, r3, #24
 8001320:	4937      	ldr	r1, [pc, #220]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_RCC_OscConfig+0x4ec>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fb26 	bl	800097c <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fb22 	bl	800097c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e056      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x41c>
 8001352:	e04e      	b.n	80013f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_RCC_OscConfig+0x4ec>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb0f 	bl	800097c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb0b 	bl	800097c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e03f      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001374:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x44a>
 8001380:	e037      	b.n	80013f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e032      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d028      	beq.n	80013ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d121      	bne.n	80013ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d11a      	bne.n	80013ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013be:	4013      	ands	r3, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d111      	bne.n	80013ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	3b01      	subs	r3, #1
 80013d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40007000 	.word	0x40007000
 8001400:	40023800 	.word	0x40023800
 8001404:	42470060 	.word	0x42470060

08001408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0cc      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d90c      	bls.n	8001444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0b8      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800147e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	494d      	ldr	r1, [pc, #308]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d044      	beq.n	8001528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d119      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e07f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d003      	beq.n	80014c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e067      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f023 0203 	bic.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4934      	ldr	r1, [pc, #208]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f8:	f7ff fa40 	bl	800097c <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7ff fa3c 	bl	800097c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e04f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 020c 	and.w	r2, r3, #12
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	429a      	cmp	r2, r3
 8001526:	d1eb      	bne.n	8001500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d20c      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e032      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4916      	ldr	r1, [pc, #88]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	490e      	ldr	r1, [pc, #56]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800158e:	f000 f821 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8001592:	4602      	mov	r2, r0
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	5ccb      	ldrb	r3, [r1, r3]
 80015a2:	fa22 f303 	lsr.w	r3, r2, r3
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f9a0 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	08001c9c 	.word	0x08001c9c
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ec:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d00d      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0x40>
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	f200 80bd 	bhi.w	8001778 <HAL_RCC_GetSysClockFreq+0x1a4>
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x34>
 8001602:	2b04      	cmp	r3, #4
 8001604:	d003      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x3a>
 8001606:	e0b7      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001608:	4b61      	ldr	r3, [pc, #388]	; (8001790 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800160a:	60bb      	str	r3, [r7, #8]
       break;
 800160c:	e0b7      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800160e:	4b61      	ldr	r3, [pc, #388]	; (8001794 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001610:	60bb      	str	r3, [r7, #8]
      break;
 8001612:	e0b4      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001614:	4b5d      	ldr	r3, [pc, #372]	; (800178c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800161c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d04d      	beq.n	80016c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800162a:	4b58      	ldr	r3, [pc, #352]	; (800178c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	099b      	lsrs	r3, r3, #6
 8001630:	461a      	mov	r2, r3
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	f240 10ff 	movw	r0, #511	; 0x1ff
 800163a:	f04f 0100 	mov.w	r1, #0
 800163e:	ea02 0800 	and.w	r8, r2, r0
 8001642:	ea03 0901 	and.w	r9, r3, r1
 8001646:	4640      	mov	r0, r8
 8001648:	4649      	mov	r1, r9
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	014b      	lsls	r3, r1, #5
 8001654:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001658:	0142      	lsls	r2, r0, #5
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	ebb0 0008 	subs.w	r0, r0, r8
 8001662:	eb61 0109 	sbc.w	r1, r1, r9
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	018b      	lsls	r3, r1, #6
 8001670:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001674:	0182      	lsls	r2, r0, #6
 8001676:	1a12      	subs	r2, r2, r0
 8001678:	eb63 0301 	sbc.w	r3, r3, r1
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	00d9      	lsls	r1, r3, #3
 8001686:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800168a:	00d0      	lsls	r0, r2, #3
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	eb12 0208 	adds.w	r2, r2, r8
 8001694:	eb43 0309 	adc.w	r3, r3, r9
 8001698:	f04f 0000 	mov.w	r0, #0
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	0259      	lsls	r1, r3, #9
 80016a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016a6:	0250      	lsls	r0, r2, #9
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	461a      	mov	r2, r3
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	f7fe fd8e 	bl	80001d8 <__aeabi_uldivmod>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4613      	mov	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e04a      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	099b      	lsrs	r3, r3, #6
 80016cc:	461a      	mov	r2, r3
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	ea02 0400 	and.w	r4, r2, r0
 80016de:	ea03 0501 	and.w	r5, r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	014b      	lsls	r3, r1, #5
 80016f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016f4:	0142      	lsls	r2, r0, #5
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	1b00      	subs	r0, r0, r4
 80016fc:	eb61 0105 	sbc.w	r1, r1, r5
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	018b      	lsls	r3, r1, #6
 800170a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800170e:	0182      	lsls	r2, r0, #6
 8001710:	1a12      	subs	r2, r2, r0
 8001712:	eb63 0301 	sbc.w	r3, r3, r1
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	00d9      	lsls	r1, r3, #3
 8001720:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001724:	00d0      	lsls	r0, r2, #3
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	1912      	adds	r2, r2, r4
 800172c:	eb45 0303 	adc.w	r3, r5, r3
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	0299      	lsls	r1, r3, #10
 800173a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800173e:	0290      	lsls	r0, r2, #10
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	461a      	mov	r2, r3
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	f7fe fd42 	bl	80001d8 <__aeabi_uldivmod>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4613      	mov	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	0c1b      	lsrs	r3, r3, #16
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	3301      	adds	r3, #1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	60bb      	str	r3, [r7, #8]
      break;
 8001776:	e002      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800177a:	60bb      	str	r3, [r7, #8]
      break;
 800177c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800177e:	68bb      	ldr	r3, [r7, #8]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	00f42400 	.word	0x00f42400
 8001794:	007a1200 	.word	0x007a1200

08001798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_RCC_GetHCLKFreq+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000000 	.word	0x20000000

080017b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017b4:	f7ff fff0 	bl	8001798 <HAL_RCC_GetHCLKFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	0a9b      	lsrs	r3, r3, #10
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4903      	ldr	r1, [pc, #12]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08001cac 	.word	0x08001cac

080017d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017dc:	f7ff ffdc 	bl	8001798 <HAL_RCC_GetHCLKFreq>
 80017e0:	4602      	mov	r2, r0
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	0b5b      	lsrs	r3, r3, #13
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	4903      	ldr	r1, [pc, #12]	; (80017fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ee:	5ccb      	ldrb	r3, [r1, r3]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	08001cac 	.word	0x08001cac

08001800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e03f      	b.n	8001892 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7fe ff94 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2224      	movs	r2, #36	; 0x24
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f829 	bl	800189c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018a0:	b09f      	sub	sp, #124	; 0x7c
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80018b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018b2:	68d9      	ldr	r1, [r3, #12]
 80018b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	ea40 0301 	orr.w	r3, r0, r1
 80018bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80018d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80018e0:	f021 010c 	bic.w	r1, r1, #12
 80018e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ea:	430b      	orrs	r3, r1
 80018ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80018f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018fa:	6999      	ldr	r1, [r3, #24]
 80018fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	ea40 0301 	orr.w	r3, r0, r1
 8001904:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4bc5      	ldr	r3, [pc, #788]	; (8001c20 <UART_SetConfig+0x384>)
 800190c:	429a      	cmp	r2, r3
 800190e:	d004      	beq.n	800191a <UART_SetConfig+0x7e>
 8001910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4bc3      	ldr	r3, [pc, #780]	; (8001c24 <UART_SetConfig+0x388>)
 8001916:	429a      	cmp	r2, r3
 8001918:	d103      	bne.n	8001922 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800191a:	f7ff ff5d 	bl	80017d8 <HAL_RCC_GetPCLK2Freq>
 800191e:	6778      	str	r0, [r7, #116]	; 0x74
 8001920:	e002      	b.n	8001928 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001922:	f7ff ff45 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8001926:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001930:	f040 80b6 	bne.w	8001aa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001936:	461c      	mov	r4, r3
 8001938:	f04f 0500 	mov.w	r5, #0
 800193c:	4622      	mov	r2, r4
 800193e:	462b      	mov	r3, r5
 8001940:	1891      	adds	r1, r2, r2
 8001942:	6439      	str	r1, [r7, #64]	; 0x40
 8001944:	415b      	adcs	r3, r3
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
 8001948:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800194c:	1912      	adds	r2, r2, r4
 800194e:	eb45 0303 	adc.w	r3, r5, r3
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	00d9      	lsls	r1, r3, #3
 800195c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001960:	00d0      	lsls	r0, r2, #3
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	1911      	adds	r1, r2, r4
 8001968:	6639      	str	r1, [r7, #96]	; 0x60
 800196a:	416b      	adcs	r3, r5
 800196c:	667b      	str	r3, [r7, #100]	; 0x64
 800196e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	1891      	adds	r1, r2, r2
 800197a:	63b9      	str	r1, [r7, #56]	; 0x38
 800197c:	415b      	adcs	r3, r3
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001984:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001988:	f7fe fc26 	bl	80001d8 <__aeabi_uldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4ba5      	ldr	r3, [pc, #660]	; (8001c28 <UART_SetConfig+0x38c>)
 8001992:	fba3 2302 	umull	r2, r3, r3, r2
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	011e      	lsls	r6, r3, #4
 800199a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800199c:	461c      	mov	r4, r3
 800199e:	f04f 0500 	mov.w	r5, #0
 80019a2:	4622      	mov	r2, r4
 80019a4:	462b      	mov	r3, r5
 80019a6:	1891      	adds	r1, r2, r2
 80019a8:	6339      	str	r1, [r7, #48]	; 0x30
 80019aa:	415b      	adcs	r3, r3
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
 80019ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019b2:	1912      	adds	r2, r2, r4
 80019b4:	eb45 0303 	adc.w	r3, r5, r3
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	00d9      	lsls	r1, r3, #3
 80019c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019c6:	00d0      	lsls	r0, r2, #3
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	1911      	adds	r1, r2, r4
 80019ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80019d0:	416b      	adcs	r3, r5
 80019d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	461a      	mov	r2, r3
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	1891      	adds	r1, r2, r2
 80019e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80019e2:	415b      	adcs	r3, r3
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019ee:	f7fe fbf3 	bl	80001d8 <__aeabi_uldivmod>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <UART_SetConfig+0x38c>)
 80019f8:	fba3 1302 	umull	r1, r3, r3, r2
 80019fc:	095b      	lsrs	r3, r3, #5
 80019fe:	2164      	movs	r1, #100	; 0x64
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	3332      	adds	r3, #50	; 0x32
 8001a0a:	4a87      	ldr	r2, [pc, #540]	; (8001c28 <UART_SetConfig+0x38c>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a18:	441e      	add	r6, r3
 8001a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f04f 0100 	mov.w	r1, #0
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	1894      	adds	r4, r2, r2
 8001a28:	623c      	str	r4, [r7, #32]
 8001a2a:	415b      	adcs	r3, r3
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a32:	1812      	adds	r2, r2, r0
 8001a34:	eb41 0303 	adc.w	r3, r1, r3
 8001a38:	f04f 0400 	mov.w	r4, #0
 8001a3c:	f04f 0500 	mov.w	r5, #0
 8001a40:	00dd      	lsls	r5, r3, #3
 8001a42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001a46:	00d4      	lsls	r4, r2, #3
 8001a48:	4622      	mov	r2, r4
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	1814      	adds	r4, r2, r0
 8001a4e:	653c      	str	r4, [r7, #80]	; 0x50
 8001a50:	414b      	adcs	r3, r1
 8001a52:	657b      	str	r3, [r7, #84]	; 0x54
 8001a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	1891      	adds	r1, r2, r2
 8001a60:	61b9      	str	r1, [r7, #24]
 8001a62:	415b      	adcs	r3, r3
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a6e:	f7fe fbb3 	bl	80001d8 <__aeabi_uldivmod>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4b6c      	ldr	r3, [pc, #432]	; (8001c28 <UART_SetConfig+0x38c>)
 8001a78:	fba3 1302 	umull	r1, r3, r3, r2
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	2164      	movs	r1, #100	; 0x64
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	3332      	adds	r3, #50	; 0x32
 8001a8a:	4a67      	ldr	r2, [pc, #412]	; (8001c28 <UART_SetConfig+0x38c>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	095b      	lsrs	r3, r3, #5
 8001a92:	f003 0207 	and.w	r2, r3, #7
 8001a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4432      	add	r2, r6
 8001a9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001a9e:	e0b9      	b.n	8001c14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aa2:	461c      	mov	r4, r3
 8001aa4:	f04f 0500 	mov.w	r5, #0
 8001aa8:	4622      	mov	r2, r4
 8001aaa:	462b      	mov	r3, r5
 8001aac:	1891      	adds	r1, r2, r2
 8001aae:	6139      	str	r1, [r7, #16]
 8001ab0:	415b      	adcs	r3, r3
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ab8:	1912      	adds	r2, r2, r4
 8001aba:	eb45 0303 	adc.w	r3, r5, r3
 8001abe:	f04f 0000 	mov.w	r0, #0
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	00d9      	lsls	r1, r3, #3
 8001ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001acc:	00d0      	lsls	r0, r2, #3
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	eb12 0804 	adds.w	r8, r2, r4
 8001ad6:	eb43 0905 	adc.w	r9, r3, r5
 8001ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	008b      	lsls	r3, r1, #2
 8001aee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001af2:	0082      	lsls	r2, r0, #2
 8001af4:	4640      	mov	r0, r8
 8001af6:	4649      	mov	r1, r9
 8001af8:	f7fe fb6e 	bl	80001d8 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <UART_SetConfig+0x38c>)
 8001b02:	fba3 2302 	umull	r2, r3, r3, r2
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	011e      	lsls	r6, r3, #4
 8001b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	1894      	adds	r4, r2, r2
 8001b18:	60bc      	str	r4, [r7, #8]
 8001b1a:	415b      	adcs	r3, r3
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b22:	1812      	adds	r2, r2, r0
 8001b24:	eb41 0303 	adc.w	r3, r1, r3
 8001b28:	f04f 0400 	mov.w	r4, #0
 8001b2c:	f04f 0500 	mov.w	r5, #0
 8001b30:	00dd      	lsls	r5, r3, #3
 8001b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001b36:	00d4      	lsls	r4, r2, #3
 8001b38:	4622      	mov	r2, r4
 8001b3a:	462b      	mov	r3, r5
 8001b3c:	1814      	adds	r4, r2, r0
 8001b3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8001b40:	414b      	adcs	r3, r1
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	008b      	lsls	r3, r1, #2
 8001b58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001b5c:	0082      	lsls	r2, r0, #2
 8001b5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b62:	f7fe fb39 	bl	80001d8 <__aeabi_uldivmod>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <UART_SetConfig+0x38c>)
 8001b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	2164      	movs	r1, #100	; 0x64
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	3332      	adds	r3, #50	; 0x32
 8001b7e:	4a2a      	ldr	r2, [pc, #168]	; (8001c28 <UART_SetConfig+0x38c>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8a:	441e      	add	r6, r3
 8001b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f04f 0100 	mov.w	r1, #0
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	1894      	adds	r4, r2, r2
 8001b9a:	603c      	str	r4, [r7, #0]
 8001b9c:	415b      	adcs	r3, r3
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba4:	1812      	adds	r2, r2, r0
 8001ba6:	eb41 0303 	adc.w	r3, r1, r3
 8001baa:	f04f 0400 	mov.w	r4, #0
 8001bae:	f04f 0500 	mov.w	r5, #0
 8001bb2:	00dd      	lsls	r5, r3, #3
 8001bb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001bb8:	00d4      	lsls	r4, r2, #3
 8001bba:	4622      	mov	r2, r4
 8001bbc:	462b      	mov	r3, r5
 8001bbe:	eb12 0a00 	adds.w	sl, r2, r0
 8001bc2:	eb43 0b01 	adc.w	fp, r3, r1
 8001bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	008b      	lsls	r3, r1, #2
 8001bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001bde:	0082      	lsls	r2, r0, #2
 8001be0:	4650      	mov	r0, sl
 8001be2:	4659      	mov	r1, fp
 8001be4:	f7fe faf8 	bl	80001d8 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <UART_SetConfig+0x38c>)
 8001bee:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2164      	movs	r1, #100	; 0x64
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	3332      	adds	r3, #50	; 0x32
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <UART_SetConfig+0x38c>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4432      	add	r2, r6
 8001c12:	609a      	str	r2, [r3, #8]
}
 8001c14:	bf00      	nop
 8001c16:	377c      	adds	r7, #124	; 0x7c
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c1e:	bf00      	nop
 8001c20:	40011000 	.word	0x40011000
 8001c24:	40011400 	.word	0x40011400
 8001c28:	51eb851f 	.word	0x51eb851f

08001c2c <__libc_init_array>:
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	4d0d      	ldr	r5, [pc, #52]	; (8001c64 <__libc_init_array+0x38>)
 8001c30:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <__libc_init_array+0x3c>)
 8001c32:	1b64      	subs	r4, r4, r5
 8001c34:	10a4      	asrs	r4, r4, #2
 8001c36:	2600      	movs	r6, #0
 8001c38:	42a6      	cmp	r6, r4
 8001c3a:	d109      	bne.n	8001c50 <__libc_init_array+0x24>
 8001c3c:	4d0b      	ldr	r5, [pc, #44]	; (8001c6c <__libc_init_array+0x40>)
 8001c3e:	4c0c      	ldr	r4, [pc, #48]	; (8001c70 <__libc_init_array+0x44>)
 8001c40:	f000 f820 	bl	8001c84 <_init>
 8001c44:	1b64      	subs	r4, r4, r5
 8001c46:	10a4      	asrs	r4, r4, #2
 8001c48:	2600      	movs	r6, #0
 8001c4a:	42a6      	cmp	r6, r4
 8001c4c:	d105      	bne.n	8001c5a <__libc_init_array+0x2e>
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c54:	4798      	blx	r3
 8001c56:	3601      	adds	r6, #1
 8001c58:	e7ee      	b.n	8001c38 <__libc_init_array+0xc>
 8001c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c5e:	4798      	blx	r3
 8001c60:	3601      	adds	r6, #1
 8001c62:	e7f2      	b.n	8001c4a <__libc_init_array+0x1e>
 8001c64:	08001cbc 	.word	0x08001cbc
 8001c68:	08001cbc 	.word	0x08001cbc
 8001c6c:	08001cbc 	.word	0x08001cbc
 8001c70:	08001cc0 	.word	0x08001cc0

08001c74 <memset>:
 8001c74:	4402      	add	r2, r0
 8001c76:	4603      	mov	r3, r0
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <memset+0xa>
 8001c7c:	4770      	bx	lr
 8001c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c82:	e7f9      	b.n	8001c78 <memset+0x4>

08001c84 <_init>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	bf00      	nop
 8001c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8a:	bc08      	pop	{r3}
 8001c8c:	469e      	mov	lr, r3
 8001c8e:	4770      	bx	lr

08001c90 <_fini>:
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	bf00      	nop
 8001c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c96:	bc08      	pop	{r3}
 8001c98:	469e      	mov	lr, r3
 8001c9a:	4770      	bx	lr
