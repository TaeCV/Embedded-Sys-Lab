
Lab4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb4  08004cb4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cbc  08004cbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045b4  20000010  08004cd4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045c4  08004cd4  000245c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012303  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002922  00000000  00000000  00032343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00034c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00035948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016852  00000000  00000000  00036540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4d2  00000000  00000000  0004cd92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e224  00000000  00000000  0005b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033fc  00000000  00000000  000e94dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004bf0 	.word	0x08004bf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004bf0 	.word	0x08004bf0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000080 	.word	0x20000080

0800050c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetTimerTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetTimerTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000280 	.word	0x20000280
 800053c:	200002d4 	.word	0x200002d4

08000540 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09c      	sub	sp, #112	; 0x70
 8000544:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000546:	f000 fabf 	bl	8000ac8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800054a:	f000 f893 	bl	8000674 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800054e:	f000 f925 	bl	800079c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000552:	f000 f8f9 	bl	8000748 <MX_USART2_UART_Init>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of myFirstTimer */
	osTimerDef(myFirstTimer, firstCallback);
 8000556:	4b3b      	ldr	r3, [pc, #236]	; (8000644 <main+0x104>)
 8000558:	66bb      	str	r3, [r7, #104]	; 0x68
 800055a:	2300      	movs	r3, #0
 800055c:	66fb      	str	r3, [r7, #108]	; 0x6c
	myFirstTimerHandle = osTimerCreate(osTimer(myFirstTimer), osTimerPeriodic,
 800055e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000562:	2200      	movs	r2, #0
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fdda 	bl	8002120 <osTimerCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <main+0x108>)
 8000570:	6013      	str	r3, [r2, #0]
	NULL);

	/* definition and creation of mySecondTimer */
	osTimerDef(mySecondTimer, secondCallback);
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <main+0x10c>)
 8000574:	663b      	str	r3, [r7, #96]	; 0x60
 8000576:	2300      	movs	r3, #0
 8000578:	667b      	str	r3, [r7, #100]	; 0x64
	mySecondTimerHandle = osTimerCreate(osTimer(mySecondTimer), osTimerPeriodic,
 800057a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800057e:	2200      	movs	r2, #0
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fdcc 	bl	8002120 <osTimerCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a31      	ldr	r2, [pc, #196]	; (8000650 <main+0x110>)
 800058c:	6013      	str	r3, [r2, #0]
	NULL);

	/* definition and creation of myThirdTimer */
	osTimerDef(myThirdTimer, thirdCallback);
 800058e:	4b31      	ldr	r3, [pc, #196]	; (8000654 <main+0x114>)
 8000590:	65bb      	str	r3, [r7, #88]	; 0x58
 8000592:	2300      	movs	r3, #0
 8000594:	65fb      	str	r3, [r7, #92]	; 0x5c
	myThirdTimerHandle = osTimerCreate(osTimer(myThirdTimer), osTimerPeriodic,
 8000596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800059a:	2200      	movs	r2, #0
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fdbe 	bl	8002120 <osTimerCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <main+0x118>)
 80005a8:	6013      	str	r3, [r2, #0]
	NULL);

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osTimerStart(myFirstTimerHandle, 50);
 80005aa:	4b27      	ldr	r3, [pc, #156]	; (8000648 <main+0x108>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2132      	movs	r1, #50	; 0x32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fde9 	bl	8002188 <osTimerStart>
	osTimerStart(mySecondTimerHandle, 18);
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <main+0x110>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2112      	movs	r1, #18
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fde3 	bl	8002188 <osTimerStart>
	osTimerStart(myThirdTimerHandle, 128);
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <main+0x118>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fddd 	bl	8002188 <osTimerStart>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of firstTask */
	osThreadDef(firstTask, StartFirstTask, osPriorityNormal, 0, 128);
 80005ce:	4b23      	ldr	r3, [pc, #140]	; (800065c <main+0x11c>)
 80005d0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	firstTaskHandle = osThreadCreate(osThread(firstTask), NULL);
 80005e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fd38 	bl	800205e <osThreadCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <main+0x120>)
 80005f2:	6013      	str	r3, [r2, #0]

	/* definition and creation of secondTask */
	osThreadDef(secondTask, StartSecondTask, osPriorityIdle, 0, 128);
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <main+0x124>)
 80005f6:	f107 0420 	add.w	r4, r7, #32
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	secondTaskHandle = osThreadCreate(osThread(secondTask), NULL);
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fd25 	bl	800205e <osThreadCreate>
 8000614:	4603      	mov	r3, r0
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <main+0x128>)
 8000618:	6013      	str	r3, [r2, #0]

	/* definition and creation of thirdTask */
	osThreadDef(thirdTask, StartThirdTask, osPriorityIdle, 0, 128);
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <main+0x12c>)
 800061c:	1d3c      	adds	r4, r7, #4
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	thirdTaskHandle = osThreadCreate(osThread(thirdTask), NULL);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fd14 	bl	800205e <osThreadCreate>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0x130>)
 800063a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800063c:	f001 fd08 	bl	8002050 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000640:	e7fe      	b.n	8000640 <main+0x100>
 8000642:	bf00      	nop
 8000644:	080008a9 	.word	0x080008a9
 8000648:	20004524 	.word	0x20004524
 800064c:	080008d1 	.word	0x080008d1
 8000650:	20004578 	.word	0x20004578
 8000654:	080008ed 	.word	0x080008ed
 8000658:	2000457c 	.word	0x2000457c
 800065c:	08004c2c 	.word	0x08004c2c
 8000660:	2000452c 	.word	0x2000452c
 8000664:	08004c48 	.word	0x08004c48
 8000668:	20004528 	.word	0x20004528
 800066c:	08004c64 	.word	0x08004c64
 8000670:	20004530 	.word	0x20004530

08000674 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 faac 	bl	8004be0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a27      	ldr	r2, [pc, #156]	; (8000740 <SystemClock_Config+0xcc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <SystemClock_Config+0xd0>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80006e4:	2310      	movs	r3, #16
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fcf4 	bl	80010e8 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x96>
		Error_Handler();
 8000706:	f000 f905 	bl	8000914 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 ff56 	bl	80015d8 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc2>
		Error_Handler();
 8000732:	f000 f8ef 	bl	8000914 <Error_Handler>
	}
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_USART2_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000780:	f001 f926 	bl	80019d0 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800078a:	f000 f8c3 	bl	8000914 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20004534 	.word	0x20004534
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a1e      	ldr	r2, [pc, #120]	; (800086c <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <MX_GPIO_Init+0xd0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	4812      	ldr	r0, [pc, #72]	; (8000870 <MX_GPIO_Init+0xd4>)
 8000828:	f000 fc2a 	bl	8001080 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0xd8>)
 8000844:	f000 fa98 	bl	8000d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000848:	2320      	movs	r3, #32
 800084a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_GPIO_Init+0xd4>)
 8000860:	f000 fa8a 	bl	8000d78 <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020800 	.word	0x40020800

08000878 <StartFirstTask>:
 * @brief  Function implementing the firstTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartFirstTask */
void StartFirstTask(void const *argument) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f001 fc38 	bl	80020f6 <osDelay>
 8000886:	e7fb      	b.n	8000880 <StartFirstTask+0x8>

08000888 <StartSecondTask>:
 * @brief Function implementing the secondTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSecondTask */
void StartSecondTask(void const *argument) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSecondTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f001 fc30 	bl	80020f6 <osDelay>
 8000896:	e7fb      	b.n	8000890 <StartSecondTask+0x8>

08000898 <StartThirdTask>:
 * @brief Function implementing the thirdTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartThirdTask */
void StartThirdTask(void const *argument) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartThirdTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f001 fc28 	bl	80020f6 <osDelay>
 80008a6:	e7fb      	b.n	80008a0 <StartThirdTask+0x8>

080008a8 <firstCallback>:
	vTaskDelete(NULL);
	/* USER CODE END StartThirdTask */
}

/* firstCallback function */
void firstCallback(void const *argument) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN firstCallback */
	char ch = 'A';
 80008b0:	2341      	movs	r3, #65	; 0x41
 80008b2:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 80008b4:	f107 010f 	add.w	r1, r7, #15
 80008b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008bc:	2201      	movs	r2, #1
 80008be:	4803      	ldr	r0, [pc, #12]	; (80008cc <firstCallback+0x24>)
 80008c0:	f001 f8d3 	bl	8001a6a <HAL_UART_Transmit>
	/* USER CODE END firstCallback */
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20004534 	.word	0x20004534

080008d0 <secondCallback>:

/* secondCallback function */
void secondCallback(void const *argument) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN secondCallback */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008d8:	2120      	movs	r1, #32
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <secondCallback+0x18>)
 80008dc:	f000 fbe9 	bl	80010b2 <HAL_GPIO_TogglePin>
	/* USER CODE END secondCallback */
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40020000 	.word	0x40020000

080008ec <thirdCallback>:

/* thirdCallback function */
void thirdCallback(void const *argument) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN thirdCallback */
	char ch = 'B';
 80008f4:	2342      	movs	r3, #66	; 0x42
 80008f6:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 80008f8:	f107 010f 	add.w	r1, r7, #15
 80008fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000900:	2201      	movs	r2, #1
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <thirdCallback+0x24>)
 8000904:	f001 f8b1 	bl	8001a6a <HAL_UART_Transmit>
	/* USER CODE END thirdCallback */
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20004534 	.word	0x20004534

08000914 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_MspInit+0x54>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a11      	ldr	r2, [pc, #68]	; (8000974 <HAL_MspInit+0x54>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x54>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_MspInit+0x54>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <HAL_MspInit+0x54>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_MspInit+0x54>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	210f      	movs	r1, #15
 8000962:	f06f 0001 	mvn.w	r0, #1
 8000966:	f000 f9de 	bl	8000d26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_UART_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12b      	bne.n	80009f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_UART_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_UART_MspInit+0x8c>)
 80009ee:	f000 f9c3 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020000 	.word	0x40020000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f898 	bl	8000b6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a3c:	f002 ff8c 	bl	8003958 <xTaskGetSchedulerState>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d001      	beq.n	8000a4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a46:	f003 fe1f 	bl	8004688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7a:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a90:	4c0b      	ldr	r4, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff ffd7 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f004 f86b 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd4b 	bl	8000540 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ab8:	08004cc4 	.word	0x08004cc4
  ldr r2, =_sbss
 8000abc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ac0:	200045c4 	.word	0x200045c4

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f90d 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff ff10 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f917 	bl	8000d5e <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f8ed 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20004580 	.word	0x20004580

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20004580 	.word	0x20004580

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff47 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff5c 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffb0 	bl	8000ccc <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e159      	b.n	8001048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8148 	bne.w	8001042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a2 	beq.w	8001042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a52      	ldr	r2, [pc, #328]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x202>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_GPIO_Init+0x2f4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x1fe>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_GPIO_Init+0x2f8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a46      	ldr	r2, [pc, #280]	; (8001074 <HAL_GPIO_Init+0x2fc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x1f6>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a45      	ldr	r2, [pc, #276]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x1f2>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_GPIO_Init+0x304>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe8:	4a24      	ldr	r2, [pc, #144]	; (800107c <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x304>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001012:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_GPIO_Init+0x304>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_GPIO_Init+0x304>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_GPIO_Init+0x304>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f aea2 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	400b      	ands	r3, r1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e264      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d075      	beq.n	80011f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	4ba3      	ldr	r3, [pc, #652]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d00c      	beq.n	800112c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001112:	4ba0      	ldr	r3, [pc, #640]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d112      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b9d      	ldr	r3, [pc, #628]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b99      	ldr	r3, [pc, #612]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d05b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x108>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d157      	bne.n	80011f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e23f      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x74>
 800114e:	4b91      	ldr	r3, [pc, #580]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a90      	ldr	r2, [pc, #576]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x98>
 8001166:	4b8b      	ldr	r3, [pc, #556]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a8a      	ldr	r2, [pc, #552]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b88      	ldr	r3, [pc, #544]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a87      	ldr	r2, [pc, #540]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 8001180:	4b84      	ldr	r3, [pc, #528]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a83      	ldr	r2, [pc, #524]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b81      	ldr	r3, [pc, #516]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a80      	ldr	r2, [pc, #512]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fcf8 	bl	8000b94 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fcf4 	bl	8000b94 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e204      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b76      	ldr	r3, [pc, #472]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xc0>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fce4 	bl	8000b94 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fce0 	bl	8000b94 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1f0      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0xe8>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d063      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	4b65      	ldr	r3, [pc, #404]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b62      	ldr	r3, [pc, #392]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1c4      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b56      	ldr	r3, [pc, #344]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4952      	ldr	r1, [pc, #328]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e03a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <HAL_RCC_OscConfig+0x2b0>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fc99 	bl	8000b94 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fc95 	bl	8000b94 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1a5      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4940      	ldr	r1, [pc, #256]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <HAL_RCC_OscConfig+0x2b0>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc78 	bl	8000b94 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc74 	bl	8000b94 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e184      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b36      	ldr	r3, [pc, #216]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d030      	beq.n	8001334 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_RCC_OscConfig+0x2b4>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fc58 	bl	8000b94 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc54 	bl	8000b94 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e164      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x200>
 8001306:	e015      	b.n	8001334 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x2b4>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fc41 	bl	8000b94 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fc3d 	bl	8000b94 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e14d      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f0      	bne.n	8001316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a0 	beq.w	8001482 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136e:	2301      	movs	r3, #1
 8001370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_RCC_OscConfig+0x2b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137a:	2b00      	cmp	r3, #0
 800137c:	d121      	bne.n	80013c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_RCC_OscConfig+0x2b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_RCC_OscConfig+0x2b8>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138a:	f7ff fc03 	bl	8000b94 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	e011      	b.n	80013b6 <HAL_RCC_OscConfig+0x2ce>
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	42470000 	.word	0x42470000
 800139c:	42470e80 	.word	0x42470e80
 80013a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a4:	f7ff fbf6 	bl	8000b94 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e106      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b85      	ldr	r3, [pc, #532]	; (80015cc <HAL_RCC_OscConfig+0x4e4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2f0>
 80013ca:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a80      	ldr	r2, [pc, #512]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
 80013d6:	e01c      	b.n	8001412 <HAL_RCC_OscConfig+0x32a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d10c      	bne.n	80013fa <HAL_RCC_OscConfig+0x312>
 80013e0:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a7a      	ldr	r2, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70
 80013ec:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a77      	ldr	r2, [pc, #476]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	e00b      	b.n	8001412 <HAL_RCC_OscConfig+0x32a>
 80013fa:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a74      	ldr	r2, [pc, #464]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d015      	beq.n	8001446 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141a:	f7ff fbbb 	bl	8000b94 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fbb7 	bl	8000b94 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0c5      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001438:	4b65      	ldr	r3, [pc, #404]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ee      	beq.n	8001422 <HAL_RCC_OscConfig+0x33a>
 8001444:	e014      	b.n	8001470 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fba5 	bl	8000b94 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff fba1 	bl	8000b94 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0af      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001464:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ee      	bne.n	800144e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d105      	bne.n	8001482 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001476:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a55      	ldr	r2, [pc, #340]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 800147c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 809b 	beq.w	80015c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d05c      	beq.n	8001552 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d141      	bne.n	8001524 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <HAL_RCC_OscConfig+0x4ec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb75 	bl	8000b94 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fb71 	bl	8000b94 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e081      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	019b      	lsls	r3, r3, #6
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	085b      	lsrs	r3, r3, #1
 80014e4:	3b01      	subs	r3, #1
 80014e6:	041b      	lsls	r3, r3, #16
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	061b      	lsls	r3, r3, #24
 80014f0:	4937      	ldr	r1, [pc, #220]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <HAL_RCC_OscConfig+0x4ec>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb4a 	bl	8000b94 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb46 	bl	8000b94 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e056      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x41c>
 8001522:	e04e      	b.n	80015c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <HAL_RCC_OscConfig+0x4ec>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fb33 	bl	8000b94 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fb2f 	bl	8000b94 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e03f      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x44a>
 8001550:	e037      	b.n	80015c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e032      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <HAL_RCC_OscConfig+0x4e8>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d028      	beq.n	80015be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d121      	bne.n	80015be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d11a      	bne.n	80015be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800158e:	4013      	ands	r3, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001594:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001596:	4293      	cmp	r3, r2
 8001598:	d111      	bne.n	80015be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	3b01      	subs	r3, #1
 80015a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d107      	bne.n	80015be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40007000 	.word	0x40007000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	42470060 	.word	0x42470060

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0cc      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d90c      	bls.n	8001614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b65      	ldr	r3, [pc, #404]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800164e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d044      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e067      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4934      	ldr	r1, [pc, #208]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fa64 	bl	8000b94 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff fa60 	bl	8000b94 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20c      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f9c4 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	08004c9c 	.word	0x08004c9c
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4b67      	ldr	r3, [pc, #412]	; (800195c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x40>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	f200 80bd 	bhi.w	8001948 <HAL_RCC_GetSysClockFreq+0x1a4>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x3a>
 80017d6:	e0b7      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b61      	ldr	r3, [pc, #388]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017da:	60bb      	str	r3, [r7, #8]
       break;
 80017dc:	e0b7      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017de:	4b61      	ldr	r3, [pc, #388]	; (8001964 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017e0:	60bb      	str	r3, [r7, #8]
      break;
 80017e2:	e0b4      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b5b      	ldr	r3, [pc, #364]	; (800195c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d04d      	beq.n	8001896 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b58      	ldr	r3, [pc, #352]	; (800195c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	461a      	mov	r2, r3
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	ea02 0800 	and.w	r8, r2, r0
 8001812:	ea03 0901 	and.w	r9, r3, r1
 8001816:	4640      	mov	r0, r8
 8001818:	4649      	mov	r1, r9
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	014b      	lsls	r3, r1, #5
 8001824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001828:	0142      	lsls	r2, r0, #5
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	ebb0 0008 	subs.w	r0, r0, r8
 8001832:	eb61 0109 	sbc.w	r1, r1, r9
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	018b      	lsls	r3, r1, #6
 8001840:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001844:	0182      	lsls	r2, r0, #6
 8001846:	1a12      	subs	r2, r2, r0
 8001848:	eb63 0301 	sbc.w	r3, r3, r1
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	00d9      	lsls	r1, r3, #3
 8001856:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800185a:	00d0      	lsls	r0, r2, #3
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	eb12 0208 	adds.w	r2, r2, r8
 8001864:	eb43 0309 	adc.w	r3, r3, r9
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	0259      	lsls	r1, r3, #9
 8001872:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001876:	0250      	lsls	r0, r2, #9
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	f7fe fcaa 	bl	80001e0 <__aeabi_uldivmod>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4613      	mov	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e04a      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001896:	4b31      	ldr	r3, [pc, #196]	; (800195c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	099b      	lsrs	r3, r3, #6
 800189c:	461a      	mov	r2, r3
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	ea02 0400 	and.w	r4, r2, r0
 80018ae:	ea03 0501 	and.w	r5, r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	014b      	lsls	r3, r1, #5
 80018c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018c4:	0142      	lsls	r2, r0, #5
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	1b00      	subs	r0, r0, r4
 80018cc:	eb61 0105 	sbc.w	r1, r1, r5
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	018b      	lsls	r3, r1, #6
 80018da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018de:	0182      	lsls	r2, r0, #6
 80018e0:	1a12      	subs	r2, r2, r0
 80018e2:	eb63 0301 	sbc.w	r3, r3, r1
 80018e6:	f04f 0000 	mov.w	r0, #0
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	00d9      	lsls	r1, r3, #3
 80018f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018f4:	00d0      	lsls	r0, r2, #3
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	1912      	adds	r2, r2, r4
 80018fc:	eb45 0303 	adc.w	r3, r5, r3
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	0299      	lsls	r1, r3, #10
 800190a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800190e:	0290      	lsls	r0, r2, #10
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	461a      	mov	r2, r3
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	f7fe fc5e 	bl	80001e0 <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4613      	mov	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	3301      	adds	r3, #1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	60bb      	str	r3, [r7, #8]
      break;
 8001946:	e002      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800194a:	60bb      	str	r3, [r7, #8]
      break;
 800194c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194e:	68bb      	ldr	r3, [r7, #8]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200

08001968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_RCC_GetHCLKFreq+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001984:	f7ff fff0 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08004cac 	.word	0x08004cac

080019a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019ac:	f7ff ffdc 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0b5b      	lsrs	r3, r3, #13
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08004cac 	.word	0x08004cac

080019d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e03f      	b.n	8001a62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe ffbe 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2224      	movs	r2, #36	; 0x24
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f929 	bl	8001c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b08a      	sub	sp, #40	; 0x28
 8001a6e:	af02      	add	r7, sp, #8
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4613      	mov	r3, r2
 8001a78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d17c      	bne.n	8001b84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_UART_Transmit+0x2c>
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e075      	b.n	8001b86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_UART_Transmit+0x3e>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e06e      	b.n	8001b86 <HAL_UART_Transmit+0x11c>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2221      	movs	r2, #33	; 0x21
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001abe:	f7ff f869 	bl	8000b94 <HAL_GetTick>
 8001ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad8:	d108      	bne.n	8001aec <HAL_UART_Transmit+0x82>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d104      	bne.n	8001aec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	e003      	b.n	8001af4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001afc:	e02a      	b.n	8001b54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2200      	movs	r2, #0
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f840 	bl	8001b8e <UART_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e036      	b.n	8001b86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10b      	bne.n	8001b36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	3302      	adds	r3, #2
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	e007      	b.n	8001b46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	3301      	adds	r3, #1
 8001b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1cf      	bne.n	8001afe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2200      	movs	r2, #0
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f810 	bl	8001b8e <UART_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e006      	b.n	8001b86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b84:	2302      	movs	r3, #2
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b090      	sub	sp, #64	; 0x40
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b9e:	e050      	b.n	8001c42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba6:	d04c      	beq.n	8001c42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <UART_WaitOnFlagUntilTimeout+0x30>
 8001bae:	f7fe fff1 	bl	8000b94 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d241      	bcs.n	8001c42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	330c      	adds	r3, #12
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc8:	e853 3f00 	ldrex	r3, [r3]
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	330c      	adds	r3, #12
 8001bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bde:	637a      	str	r2, [r7, #52]	; 0x34
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001be6:	e841 2300 	strex	r3, r2, [r1]
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1e5      	bne.n	8001bbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	e853 3f00 	ldrex	r3, [r3]
 8001c00:	613b      	str	r3, [r7, #16]
   return(result);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3314      	adds	r3, #20
 8001c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c12:	623a      	str	r2, [r7, #32]
 8001c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c16:	69f9      	ldr	r1, [r7, #28]
 8001c18:	6a3a      	ldr	r2, [r7, #32]
 8001c1a:	e841 2300 	strex	r3, r2, [r1]
 8001c1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1e5      	bne.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e00f      	b.n	8001c62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	bf0c      	ite	eq
 8001c52:	2301      	moveq	r3, #1
 8001c54:	2300      	movne	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d09f      	beq.n	8001ba0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3740      	adds	r7, #64	; 0x40
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c70:	b09f      	sub	sp, #124	; 0x7c
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c82:	68d9      	ldr	r1, [r3, #12]
 8001c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	ea40 0301 	orr.w	r3, r0, r1
 8001c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001cb0:	f021 010c 	bic.w	r1, r1, #12
 8001cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cca:	6999      	ldr	r1, [r3, #24]
 8001ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	ea40 0301 	orr.w	r3, r0, r1
 8001cd4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4bc5      	ldr	r3, [pc, #788]	; (8001ff0 <UART_SetConfig+0x384>)
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d004      	beq.n	8001cea <UART_SetConfig+0x7e>
 8001ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4bc3      	ldr	r3, [pc, #780]	; (8001ff4 <UART_SetConfig+0x388>)
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d103      	bne.n	8001cf2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001cea:	f7ff fe5d 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8001cee:	6778      	str	r0, [r7, #116]	; 0x74
 8001cf0:	e002      	b.n	8001cf8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cf2:	f7ff fe45 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 8001cf6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d00:	f040 80b6 	bne.w	8001e70 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d06:	461c      	mov	r4, r3
 8001d08:	f04f 0500 	mov.w	r5, #0
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	462b      	mov	r3, r5
 8001d10:	1891      	adds	r1, r2, r2
 8001d12:	6439      	str	r1, [r7, #64]	; 0x40
 8001d14:	415b      	adcs	r3, r3
 8001d16:	647b      	str	r3, [r7, #68]	; 0x44
 8001d18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d1c:	1912      	adds	r2, r2, r4
 8001d1e:	eb45 0303 	adc.w	r3, r5, r3
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	00d9      	lsls	r1, r3, #3
 8001d2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d30:	00d0      	lsls	r0, r2, #3
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	1911      	adds	r1, r2, r4
 8001d38:	6639      	str	r1, [r7, #96]	; 0x60
 8001d3a:	416b      	adcs	r3, r5
 8001d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8001d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	1891      	adds	r1, r2, r2
 8001d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d4c:	415b      	adcs	r3, r3
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d58:	f7fe fa42 	bl	80001e0 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4ba5      	ldr	r3, [pc, #660]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001d62:	fba3 2302 	umull	r2, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	011e      	lsls	r6, r3, #4
 8001d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d6c:	461c      	mov	r4, r3
 8001d6e:	f04f 0500 	mov.w	r5, #0
 8001d72:	4622      	mov	r2, r4
 8001d74:	462b      	mov	r3, r5
 8001d76:	1891      	adds	r1, r2, r2
 8001d78:	6339      	str	r1, [r7, #48]	; 0x30
 8001d7a:	415b      	adcs	r3, r3
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d82:	1912      	adds	r2, r2, r4
 8001d84:	eb45 0303 	adc.w	r3, r5, r3
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	00d9      	lsls	r1, r3, #3
 8001d92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d96:	00d0      	lsls	r0, r2, #3
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	1911      	adds	r1, r2, r4
 8001d9e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001da0:	416b      	adcs	r3, r5
 8001da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	1891      	adds	r1, r2, r2
 8001db0:	62b9      	str	r1, [r7, #40]	; 0x28
 8001db2:	415b      	adcs	r3, r3
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001dbe:	f7fe fa0f 	bl	80001e0 <__aeabi_uldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	2164      	movs	r1, #100	; 0x64
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	3332      	adds	r3, #50	; 0x32
 8001dda:	4a87      	ldr	r2, [pc, #540]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001de8:	441e      	add	r6, r3
 8001dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dec:	4618      	mov	r0, r3
 8001dee:	f04f 0100 	mov.w	r1, #0
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	1894      	adds	r4, r2, r2
 8001df8:	623c      	str	r4, [r7, #32]
 8001dfa:	415b      	adcs	r3, r3
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e02:	1812      	adds	r2, r2, r0
 8001e04:	eb41 0303 	adc.w	r3, r1, r3
 8001e08:	f04f 0400 	mov.w	r4, #0
 8001e0c:	f04f 0500 	mov.w	r5, #0
 8001e10:	00dd      	lsls	r5, r3, #3
 8001e12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e16:	00d4      	lsls	r4, r2, #3
 8001e18:	4622      	mov	r2, r4
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	1814      	adds	r4, r2, r0
 8001e1e:	653c      	str	r4, [r7, #80]	; 0x50
 8001e20:	414b      	adcs	r3, r1
 8001e22:	657b      	str	r3, [r7, #84]	; 0x54
 8001e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	1891      	adds	r1, r2, r2
 8001e30:	61b9      	str	r1, [r7, #24]
 8001e32:	415b      	adcs	r3, r3
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e3e:	f7fe f9cf 	bl	80001e0 <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001e48:	fba3 1302 	umull	r1, r3, r3, r2
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	2164      	movs	r1, #100	; 0x64
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	3332      	adds	r3, #50	; 0x32
 8001e5a:	4a67      	ldr	r2, [pc, #412]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	f003 0207 	and.w	r2, r3, #7
 8001e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4432      	add	r2, r6
 8001e6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e6e:	e0b9      	b.n	8001fe4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e72:	461c      	mov	r4, r3
 8001e74:	f04f 0500 	mov.w	r5, #0
 8001e78:	4622      	mov	r2, r4
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	1891      	adds	r1, r2, r2
 8001e7e:	6139      	str	r1, [r7, #16]
 8001e80:	415b      	adcs	r3, r3
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e88:	1912      	adds	r2, r2, r4
 8001e8a:	eb45 0303 	adc.w	r3, r5, r3
 8001e8e:	f04f 0000 	mov.w	r0, #0
 8001e92:	f04f 0100 	mov.w	r1, #0
 8001e96:	00d9      	lsls	r1, r3, #3
 8001e98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e9c:	00d0      	lsls	r0, r2, #3
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	eb12 0804 	adds.w	r8, r2, r4
 8001ea6:	eb43 0905 	adc.w	r9, r3, r5
 8001eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	008b      	lsls	r3, r1, #2
 8001ebe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001ec2:	0082      	lsls	r2, r0, #2
 8001ec4:	4640      	mov	r0, r8
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	f7fe f98a 	bl	80001e0 <__aeabi_uldivmod>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	011e      	lsls	r6, r3, #4
 8001eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001edc:	4618      	mov	r0, r3
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	1894      	adds	r4, r2, r2
 8001ee8:	60bc      	str	r4, [r7, #8]
 8001eea:	415b      	adcs	r3, r3
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ef2:	1812      	adds	r2, r2, r0
 8001ef4:	eb41 0303 	adc.w	r3, r1, r3
 8001ef8:	f04f 0400 	mov.w	r4, #0
 8001efc:	f04f 0500 	mov.w	r5, #0
 8001f00:	00dd      	lsls	r5, r3, #3
 8001f02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f06:	00d4      	lsls	r4, r2, #3
 8001f08:	4622      	mov	r2, r4
 8001f0a:	462b      	mov	r3, r5
 8001f0c:	1814      	adds	r4, r2, r0
 8001f0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8001f10:	414b      	adcs	r3, r1
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	008b      	lsls	r3, r1, #2
 8001f28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f2c:	0082      	lsls	r2, r0, #2
 8001f2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f32:	f7fe f955 	bl	80001e0 <__aeabi_uldivmod>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	2164      	movs	r1, #100	; 0x64
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	3332      	adds	r3, #50	; 0x32
 8001f4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f5a:	441e      	add	r6, r3
 8001f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f04f 0100 	mov.w	r1, #0
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	1894      	adds	r4, r2, r2
 8001f6a:	603c      	str	r4, [r7, #0]
 8001f6c:	415b      	adcs	r3, r3
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f74:	1812      	adds	r2, r2, r0
 8001f76:	eb41 0303 	adc.w	r3, r1, r3
 8001f7a:	f04f 0400 	mov.w	r4, #0
 8001f7e:	f04f 0500 	mov.w	r5, #0
 8001f82:	00dd      	lsls	r5, r3, #3
 8001f84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f88:	00d4      	lsls	r4, r2, #3
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	462b      	mov	r3, r5
 8001f8e:	eb12 0a00 	adds.w	sl, r2, r0
 8001f92:	eb43 0b01 	adc.w	fp, r3, r1
 8001f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	008b      	lsls	r3, r1, #2
 8001faa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001fae:	0082      	lsls	r2, r0, #2
 8001fb0:	4650      	mov	r0, sl
 8001fb2:	4659      	mov	r1, fp
 8001fb4:	f7fe f914 	bl	80001e0 <__aeabi_uldivmod>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2164      	movs	r1, #100	; 0x64
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	3332      	adds	r3, #50	; 0x32
 8001fd0:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <UART_SetConfig+0x38c>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4432      	add	r2, r6
 8001fe2:	609a      	str	r2, [r3, #8]
}
 8001fe4:	bf00      	nop
 8001fe6:	377c      	adds	r7, #124	; 0x7c
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fee:	bf00      	nop
 8001ff0:	40011000 	.word	0x40011000
 8001ff4:	40011400 	.word	0x40011400
 8001ff8:	51eb851f 	.word	0x51eb851f

08001ffc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800200a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200e:	2b84      	cmp	r3, #132	; 0x84
 8002010:	d005      	beq.n	800201e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002012:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4413      	add	r3, r2
 800201a:	3303      	adds	r3, #3
 800201c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002032:	f3ef 8305 	mrs	r3, IPSR
 8002036:	607b      	str	r3, [r7, #4]
  return(result);
 8002038:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002054:	f001 f840 	bl	80030d8 <vTaskStartScheduler>
  
  return osOK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}

0800205e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800205e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002060:	b089      	sub	sp, #36	; 0x24
 8002062:	af04      	add	r7, sp, #16
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <osThreadCreate+0x54>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01c      	beq.n	80020b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685c      	ldr	r4, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681d      	ldr	r5, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691e      	ldr	r6, [r3, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ffb6 	bl	8001ffc <makeFreeRtosPriority>
 8002090:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800209a:	9202      	str	r2, [sp, #8]
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	9100      	str	r1, [sp, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4632      	mov	r2, r6
 80020a4:	4629      	mov	r1, r5
 80020a6:	4620      	mov	r0, r4
 80020a8:	f000 fe4e 	bl	8002d48 <xTaskCreateStatic>
 80020ac:	4603      	mov	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e01c      	b.n	80020ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685c      	ldr	r4, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020be:	b29e      	uxth	r6, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff98 	bl	8001ffc <makeFreeRtosPriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	9200      	str	r2, [sp, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	4632      	mov	r2, r6
 80020da:	4629      	mov	r1, r5
 80020dc:	4620      	mov	r0, r4
 80020de:	f000 fe90 	bl	8002e02 <xTaskCreate>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <osDelay+0x16>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	e000      	b.n	800210e <osDelay+0x18>
 800210c:	2301      	movs	r3, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f000 ffae 	bl	8003070 <vTaskDelay>
  
  return osOK;
 8002114:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	460b      	mov	r3, r1
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d013      	beq.n	800215e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <osTimerCreate+0x20>
 800213c:	2101      	movs	r1, #1
 800213e:	e000      	b.n	8002142 <osTimerCreate+0x22>
 8002140:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800214a:	9201      	str	r2, [sp, #4]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	460a      	mov	r2, r1
 8002152:	2101      	movs	r1, #1
 8002154:	480b      	ldr	r0, [pc, #44]	; (8002184 <osTimerCreate+0x64>)
 8002156:	f001 fd72 	bl	8003c3e <xTimerCreateStatic>
 800215a:	4603      	mov	r3, r0
 800215c:	e00e      	b.n	800217c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <osTimerCreate+0x48>
 8002164:	2201      	movs	r2, #1
 8002166:	e000      	b.n	800216a <osTimerCreate+0x4a>
 8002168:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2101      	movs	r1, #1
 8002174:	4803      	ldr	r0, [pc, #12]	; (8002184 <osTimerCreate+0x64>)
 8002176:	f001 fd41 	bl	8003bfc <xTimerCreate>
 800217a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	08004c80 	.word	0x08004c80

08002188 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <osTimerStart+0x20>
    ticks = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80021a8:	f7ff ff40 	bl	800202c <inHandlerMode>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01a      	beq.n	80021e8 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	2200      	movs	r2, #0
 80021b8:	9200      	str	r2, [sp, #0]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	2109      	movs	r1, #9
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f001 fdb6 	bl	8003d30 <xTimerGenericCommand>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d002      	beq.n	80021d0 <osTimerStart+0x48>
    {
      result = osErrorOS;
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e018      	b.n	8002202 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <osTimerStart+0x7a>
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <osTimerStart+0x84>)
 80021d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	e00c      	b.n	8002202 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80021e8:	2300      	movs	r3, #0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	2300      	movs	r3, #0
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	2104      	movs	r1, #4
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f001 fd9c 	bl	8003d30 <xTimerGenericCommand>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d001      	beq.n	8002202 <osTimerStart+0x7a>
      result = osErrorOS;
 80021fe:	23ff      	movs	r3, #255	; 0xff
 8002200:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002202:	697b      	ldr	r3, [r7, #20]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	e000ed04 	.word	0xe000ed04

08002210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f103 0208 	add.w	r2, r3, #8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f103 0208 	add.w	r2, r3, #8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0208 	add.w	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d103      	bne.n	80022d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e00c      	b.n	80022ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3308      	adds	r3, #8
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e002      	b.n	80022e0 <vListInsert+0x2e>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d2f6      	bcs.n	80022da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6892      	ldr	r2, [r2, #8]
 800233a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6852      	ldr	r2, [r2, #4]
 8002344:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	d103      	bne.n	8002358 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1e5a      	subs	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023a2:	f002 f8df 	bl	8004564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	68f9      	ldr	r1, [r7, #12]
 80023b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	441a      	add	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	3b01      	subs	r3, #1
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	441a      	add	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	22ff      	movs	r2, #255	; 0xff
 80023e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	22ff      	movs	r2, #255	; 0xff
 80023ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d114      	bne.n	8002422 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01a      	beq.n	8002436 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3310      	adds	r3, #16
 8002404:	4618      	mov	r0, r3
 8002406:	f001 f8eb 	bl	80035e0 <xTaskRemoveFromEventList>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <xQueueGenericReset+0xcc>)
 8002412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	e009      	b.n	8002436 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3310      	adds	r3, #16
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fef2 	bl	8002210 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3324      	adds	r3, #36	; 0x24
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff feed 	bl	8002210 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002436:	f002 f8c5 	bl	80045c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	e000ed04 	.word	0xe000ed04

08002448 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08e      	sub	sp, #56	; 0x38
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
}
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <xQueueGenericCreateStatic+0x52>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <xQueueGenericCreateStatic+0x56>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <xQueueGenericCreateStatic+0x58>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	623b      	str	r3, [r7, #32]
}
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <xQueueGenericCreateStatic+0x7e>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <xQueueGenericCreateStatic+0x82>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <xQueueGenericCreateStatic+0x84>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	61fb      	str	r3, [r7, #28]
}
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80024e6:	2348      	movs	r3, #72	; 0x48
 80024e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b48      	cmp	r3, #72	; 0x48
 80024ee:	d00a      	beq.n	8002506 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	61bb      	str	r3, [r7, #24]
}
 8002502:	bf00      	nop
 8002504:	e7fe      	b.n	8002504 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002506:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800251a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f805 	bl	8002538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002530:	4618      	mov	r0, r3
 8002532:	3730      	adds	r7, #48	; 0x30
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e002      	b.n	800255a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002566:	2101      	movs	r1, #1
 8002568:	69b8      	ldr	r0, [r7, #24]
 800256a:	f7ff ff05 	bl	8002378 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08e      	sub	sp, #56	; 0x38
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002586:	2300      	movs	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <xQueueGenericSend+0x32>
	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <xQueueGenericSend+0x40>
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <xQueueGenericSend+0x44>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <xQueueGenericSend+0x46>
 80025bc:	2300      	movs	r3, #0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <xQueueGenericSend+0x60>
	__asm volatile
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025d4:	bf00      	nop
 80025d6:	e7fe      	b.n	80025d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d103      	bne.n	80025e6 <xQueueGenericSend+0x6e>
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <xQueueGenericSend+0x72>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <xQueueGenericSend+0x74>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericSend+0x8e>
	__asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	623b      	str	r3, [r7, #32]
}
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002606:	f001 f9a7 	bl	8003958 <xTaskGetSchedulerState>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <xQueueGenericSend+0x9e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <xQueueGenericSend+0xa2>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <xQueueGenericSend+0xa4>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <xQueueGenericSend+0xbe>
	__asm volatile
 8002620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	61fb      	str	r3, [r7, #28]
}
 8002632:	bf00      	nop
 8002634:	e7fe      	b.n	8002634 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002636:	f001 ff95 	bl	8004564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <xQueueGenericSend+0xd4>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d129      	bne.n	80026a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002652:	f000 fa0b 	bl	8002a6c <prvCopyDataToQueue>
 8002656:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d010      	beq.n	8002682 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	3324      	adds	r3, #36	; 0x24
 8002664:	4618      	mov	r0, r3
 8002666:	f000 ffbb 	bl	80035e0 <xTaskRemoveFromEventList>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002670:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <xQueueGenericSend+0x1f8>)
 8002672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	e00a      	b.n	8002698 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <xQueueGenericSend+0x1f8>)
 800268a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002698:	f001 ff94 	bl	80045c4 <vPortExitCritical>
				return pdPASS;
 800269c:	2301      	movs	r3, #1
 800269e:	e063      	b.n	8002768 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026a6:	f001 ff8d 	bl	80045c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e05c      	b.n	8002768 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fff3 	bl	80036a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026be:	2301      	movs	r3, #1
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026c2:	f001 ff7f 	bl	80045c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026c6:	f000 fd6d 	bl	80031a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026ca:	f001 ff4b 	bl	8004564 <vPortEnterCritical>
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026da:	d103      	bne.n	80026e4 <xQueueGenericSend+0x16c>
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d103      	bne.n	80026fa <xQueueGenericSend+0x182>
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026fa:	f001 ff63 	bl	80045c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026fe:	1d3a      	adds	r2, r7, #4
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f000 ffe2 	bl	80036d0 <xTaskCheckForTimeOut>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d124      	bne.n	800275c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002714:	f000 faa2 	bl	8002c5c <prvIsQueueFull>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d018      	beq.n	8002750 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	3310      	adds	r3, #16
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f000 ff0a 	bl	8003540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800272c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800272e:	f000 fa2d 	bl	8002b8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002732:	f000 fd45 	bl	80031c0 <xTaskResumeAll>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f47f af7c 	bne.w	8002636 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <xQueueGenericSend+0x1f8>)
 8002740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	e772      	b.n	8002636 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002752:	f000 fa1b 	bl	8002b8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002756:	f000 fd33 	bl	80031c0 <xTaskResumeAll>
 800275a:	e76c      	b.n	8002636 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800275c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800275e:	f000 fa15 	bl	8002b8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002762:	f000 fd2d 	bl	80031c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002766:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002768:	4618      	mov	r0, r3
 800276a:	3738      	adds	r7, #56	; 0x38
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b090      	sub	sp, #64	; 0x40
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <xQueueGenericSendFromISR+0x3c>
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <xQueueGenericSendFromISR+0x40>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <xQueueGenericSendFromISR+0x42>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d103      	bne.n	80027de <xQueueGenericSendFromISR+0x6a>
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <xQueueGenericSendFromISR+0x6e>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <xQueueGenericSendFromISR+0x70>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	623b      	str	r3, [r7, #32]
}
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027fe:	f001 ff93 	bl	8004728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002802:	f3ef 8211 	mrs	r2, BASEPRI
 8002806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	61fa      	str	r2, [r7, #28]
 8002818:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800281a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	429a      	cmp	r2, r3
 8002828:	d302      	bcc.n	8002830 <xQueueGenericSendFromISR+0xbc>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d12f      	bne.n	8002890 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002846:	f000 f911 	bl	8002a6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800284a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d112      	bne.n	800287a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	2b00      	cmp	r3, #0
 800285a:	d016      	beq.n	800288a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285e:	3324      	adds	r3, #36	; 0x24
 8002860:	4618      	mov	r0, r3
 8002862:	f000 febd 	bl	80035e0 <xTaskRemoveFromEventList>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00e      	beq.n	800288a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e007      	b.n	800288a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800287a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800287e:	3301      	adds	r3, #1
 8002880:	b2db      	uxtb	r3, r3
 8002882:	b25a      	sxtb	r2, r3
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800288a:	2301      	movs	r3, #1
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800288e:	e001      	b.n	8002894 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002890:	2300      	movs	r3, #0
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800289e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3740      	adds	r7, #64	; 0x40
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	; 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <xQueueReceive+0x30>
	__asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	623b      	str	r3, [r7, #32]
}
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d103      	bne.n	80028ea <xQueueReceive+0x3e>
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <xQueueReceive+0x42>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <xQueueReceive+0x44>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xQueueReceive+0x5e>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	61fb      	str	r3, [r7, #28]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800290a:	f001 f825 	bl	8003958 <xTaskGetSchedulerState>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <xQueueReceive+0x6e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <xQueueReceive+0x72>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueReceive+0x74>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueReceive+0x8e>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	61bb      	str	r3, [r7, #24]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800293a:	f001 fe13 	bl	8004564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01f      	beq.n	800298a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294e:	f000 f8f7 	bl	8002b40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1e5a      	subs	r2, r3, #1
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00f      	beq.n	8002982 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	3310      	adds	r3, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fe3a 	bl	80035e0 <xTaskRemoveFromEventList>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <xQueueReceive+0x1bc>)
 8002974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002982:	f001 fe1f 	bl	80045c4 <vPortExitCritical>
				return pdPASS;
 8002986:	2301      	movs	r3, #1
 8002988:	e069      	b.n	8002a5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002990:	f001 fe18 	bl	80045c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002994:	2300      	movs	r3, #0
 8002996:	e062      	b.n	8002a5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fe7e 	bl	80036a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029ac:	f001 fe0a 	bl	80045c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029b0:	f000 fbf8 	bl	80031a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029b4:	f001 fdd6 	bl	8004564 <vPortEnterCritical>
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d103      	bne.n	80029ce <xQueueReceive+0x122>
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029da:	d103      	bne.n	80029e4 <xQueueReceive+0x138>
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e4:	f001 fdee 	bl	80045c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029e8:	1d3a      	adds	r2, r7, #4
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fe6d 	bl	80036d0 <xTaskCheckForTimeOut>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d123      	bne.n	8002a44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029fe:	f000 f917 	bl	8002c30 <prvIsQueueEmpty>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d017      	beq.n	8002a38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	3324      	adds	r3, #36	; 0x24
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fd95 	bl	8003540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a18:	f000 f8b8 	bl	8002b8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a1c:	f000 fbd0 	bl	80031c0 <xTaskResumeAll>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d189      	bne.n	800293a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <xQueueReceive+0x1bc>)
 8002a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	e780      	b.n	800293a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a3a:	f000 f8a7 	bl	8002b8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a3e:	f000 fbbf 	bl	80031c0 <xTaskResumeAll>
 8002a42:	e77a      	b.n	800293a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a46:	f000 f8a1 	bl	8002b8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a4a:	f000 fbb9 	bl	80031c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a50:	f000 f8ee 	bl	8002c30 <prvIsQueueEmpty>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f43f af6f 	beq.w	800293a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3730      	adds	r7, #48	; 0x30
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10d      	bne.n	8002aa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d14d      	bne.n	8002b2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 ff7c 	bl	8003994 <xTaskPriorityDisinherit>
 8002a9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e043      	b.n	8002b2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d119      	bne.n	8002ae0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6858      	ldr	r0, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	f002 f884 	bl	8004bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	441a      	add	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d32b      	bcc.n	8002b2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e026      	b.n	8002b2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68d8      	ldr	r0, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	f002 f86a 	bl	8004bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	425b      	negs	r3, r3
 8002afa:	441a      	add	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d207      	bcs.n	8002b1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	425b      	negs	r3, r3
 8002b16:	441a      	add	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d105      	bne.n	8002b2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b36:	697b      	ldr	r3, [r7, #20]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d018      	beq.n	8002b84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	441a      	add	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d303      	bcc.n	8002b74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68d9      	ldr	r1, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	f002 f820 	bl	8004bc4 <memcpy>
	}
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b94:	f001 fce6 	bl	8004564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ba0:	e011      	b.n	8002bc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3324      	adds	r3, #36	; 0x24
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fd16 	bl	80035e0 <xTaskRemoveFromEventList>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bba:	f000 fdeb 	bl	8003794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	dce9      	bgt.n	8002ba2 <prvUnlockQueue+0x16>
 8002bce:	e000      	b.n	8002bd2 <prvUnlockQueue+0x46>
					break;
 8002bd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	22ff      	movs	r2, #255	; 0xff
 8002bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002bda:	f001 fcf3 	bl	80045c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002bde:	f001 fcc1 	bl	8004564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002be8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bea:	e011      	b.n	8002c10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d012      	beq.n	8002c1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3310      	adds	r3, #16
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fcf1 	bl	80035e0 <xTaskRemoveFromEventList>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c04:	f000 fdc6 	bl	8003794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c08:	7bbb      	ldrb	r3, [r7, #14]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	dce9      	bgt.n	8002bec <prvUnlockQueue+0x60>
 8002c18:	e000      	b.n	8002c1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	22ff      	movs	r2, #255	; 0xff
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c24:	f001 fcce 	bl	80045c4 <vPortExitCritical>
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c38:	f001 fc94 	bl	8004564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e001      	b.n	8002c4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c4e:	f001 fcb9 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 8002c52:	68fb      	ldr	r3, [r7, #12]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c64:	f001 fc7e 	bl	8004564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d102      	bne.n	8002c7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e001      	b.n	8002c7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c7e:	f001 fca1 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e014      	b.n	8002cc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <vQueueAddToRegistry+0x50>)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <vQueueAddToRegistry+0x50>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <vQueueAddToRegistry+0x50>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cbe:	e006      	b.n	8002cce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b07      	cmp	r3, #7
 8002cca:	d9e7      	bls.n	8002c9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20004584 	.word	0x20004584

08002ce0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002cf0:	f001 fc38 	bl	8004564 <vPortEnterCritical>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d103      	bne.n	8002d0a <vQueueWaitForMessageRestricted+0x2a>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d103      	bne.n	8002d20 <vQueueWaitForMessageRestricted+0x40>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d20:	f001 fc50 	bl	80045c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	3324      	adds	r3, #36	; 0x24
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fc27 	bl	8003588 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f7ff ff26 	bl	8002b8c <prvUnlockQueue>
	}
 8002d40:	bf00      	nop
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08e      	sub	sp, #56	; 0x38
 8002d4c:	af04      	add	r7, sp, #16
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	623b      	str	r3, [r7, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	e7fe      	b.n	8002d70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <xTaskCreateStatic+0x46>
	__asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	61fb      	str	r3, [r7, #28]
}
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d8e:	2354      	movs	r3, #84	; 0x54
 8002d90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b54      	cmp	r3, #84	; 0x54
 8002d96:	d00a      	beq.n	8002dae <xTaskCreateStatic+0x66>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	61bb      	str	r3, [r7, #24]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01e      	beq.n	8002df4 <xTaskCreateStatic+0xac>
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9303      	str	r3, [sp, #12]
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f850 	bl	8002e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dee:	f000 f8d5 	bl	8002f9c <prvAddNewTaskToReadyList>
 8002df2:	e001      	b.n	8002df8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002df8:	697b      	ldr	r3, [r7, #20]
	}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3728      	adds	r7, #40	; 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b08c      	sub	sp, #48	; 0x30
 8002e06:	af04      	add	r7, sp, #16
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fcc6 	bl	80047a8 <pvPortMalloc>
 8002e1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e24:	2054      	movs	r0, #84	; 0x54
 8002e26:	f001 fcbf 	bl	80047a8 <pvPortMalloc>
 8002e2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
 8002e38:	e005      	b.n	8002e46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f001 fd80 	bl	8004940 <vPortFree>
 8002e40:	e001      	b.n	8002e46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d017      	beq.n	8002e7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9303      	str	r3, [sp, #12]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	9302      	str	r3, [sp, #8]
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f80e 	bl	8002e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e70:	69f8      	ldr	r0, [r7, #28]
 8002e72:	f000 f893 	bl	8002f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e002      	b.n	8002e82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e82:	69bb      	ldr	r3, [r7, #24]
	}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f023 0307 	bic.w	r3, r3, #7
 8002eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	617b      	str	r3, [r7, #20]
}
 8002ed0:	bf00      	nop
 8002ed2:	e7fe      	b.n	8002ed2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01f      	beq.n	8002f1a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e012      	b.n	8002f06 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	7819      	ldrb	r1, [r3, #0]
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	3334      	adds	r3, #52	; 0x34
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2b0f      	cmp	r3, #15
 8002f0a:	d9e9      	bls.n	8002ee0 <prvInitialiseNewTask+0x54>
 8002f0c:	e000      	b.n	8002f10 <prvInitialiseNewTask+0x84>
			{
				break;
 8002f0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f18:	e003      	b.n	8002f22 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	2b06      	cmp	r3, #6
 8002f26:	d901      	bls.n	8002f2c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f28:	2306      	movs	r3, #6
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	3304      	adds	r3, #4
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff f984 	bl	8002250 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f97f 	bl	8002250 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	f1c3 0207 	rsb	r2, r3, #7
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	69b8      	ldr	r0, [r7, #24]
 8002f7c:	f001 f9c2 	bl	8004304 <pxPortInitialiseStack>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f92:	bf00      	nop
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fa4:	f001 fade 	bl	8004564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <prvAddNewTaskToReadyList+0xb8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	4a29      	ldr	r2, [pc, #164]	; (8003054 <prvAddNewTaskToReadyList+0xb8>)
 8002fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <prvAddNewTaskToReadyList+0xbc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fba:	4a27      	ldr	r2, [pc, #156]	; (8003058 <prvAddNewTaskToReadyList+0xbc>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <prvAddNewTaskToReadyList+0xb8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d110      	bne.n	8002fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fc8:	f000 fc08 	bl	80037dc <prvInitialiseTaskLists>
 8002fcc:	e00d      	b.n	8002fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fce:	4b23      	ldr	r3, [pc, #140]	; (800305c <prvAddNewTaskToReadyList+0xc0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <prvAddNewTaskToReadyList+0xbc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d802      	bhi.n	8002fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <prvAddNewTaskToReadyList+0xbc>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <prvAddNewTaskToReadyList+0xc4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <prvAddNewTaskToReadyList+0xc4>)
 8002ff2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <prvAddNewTaskToReadyList+0xc8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4313      	orrs	r3, r2
 8003002:	4a18      	ldr	r2, [pc, #96]	; (8003064 <prvAddNewTaskToReadyList+0xc8>)
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4a15      	ldr	r2, [pc, #84]	; (8003068 <prvAddNewTaskToReadyList+0xcc>)
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4610      	mov	r0, r2
 800301e:	f7ff f924 	bl	800226a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003022:	f001 facf 	bl	80045c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <prvAddNewTaskToReadyList+0xc0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <prvAddNewTaskToReadyList+0xbc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	429a      	cmp	r2, r3
 800303a:	d207      	bcs.n	800304c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <prvAddNewTaskToReadyList+0xd0>)
 800303e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	200007d4 	.word	0x200007d4
 8003058:	200006d4 	.word	0x200006d4
 800305c:	200007e0 	.word	0x200007e0
 8003060:	200007f0 	.word	0x200007f0
 8003064:	200007dc 	.word	0x200007dc
 8003068:	200006d8 	.word	0x200006d8
 800306c:	e000ed04 	.word	0xe000ed04

08003070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d017      	beq.n	80030b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <vTaskDelay+0x60>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <vTaskDelay+0x30>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	60bb      	str	r3, [r7, #8]
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030a0:	f000 f880 	bl	80031a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030a4:	2100      	movs	r1, #0
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fcfa 	bl	8003aa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030ac:	f000 f888 	bl	80031c0 <xTaskResumeAll>
 80030b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <vTaskDelay+0x64>)
 80030ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	200007fc 	.word	0x200007fc
 80030d4:	e000ed04 	.word	0xe000ed04

080030d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030e6:	463a      	mov	r2, r7
 80030e8:	1d39      	adds	r1, r7, #4
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd f9f2 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	9202      	str	r2, [sp, #8]
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2300      	movs	r3, #0
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2300      	movs	r3, #0
 8003104:	460a      	mov	r2, r1
 8003106:	4921      	ldr	r1, [pc, #132]	; (800318c <vTaskStartScheduler+0xb4>)
 8003108:	4821      	ldr	r0, [pc, #132]	; (8003190 <vTaskStartScheduler+0xb8>)
 800310a:	f7ff fe1d 	bl	8002d48 <xTaskCreateStatic>
 800310e:	4603      	mov	r3, r0
 8003110:	4a20      	ldr	r2, [pc, #128]	; (8003194 <vTaskStartScheduler+0xbc>)
 8003112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003114:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <vTaskStartScheduler+0xbc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800311c:	2301      	movs	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e001      	b.n	8003126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d102      	bne.n	8003132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800312c:	f000 fd1e 	bl	8003b6c <xTimerCreateTimerTask>
 8003130:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d116      	bne.n	8003166 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	613b      	str	r3, [r7, #16]
}
 800314a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <vTaskStartScheduler+0xc0>)
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <vTaskStartScheduler+0xc4>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <vTaskStartScheduler+0xc8>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003160:	f001 f95e 	bl	8004420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003164:	e00e      	b.n	8003184 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d10a      	bne.n	8003184 <vTaskStartScheduler+0xac>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	60fb      	str	r3, [r7, #12]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <vTaskStartScheduler+0xaa>
}
 8003184:	bf00      	nop
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	08004c84 	.word	0x08004c84
 8003190:	080037ad 	.word	0x080037ad
 8003194:	200007f8 	.word	0x200007f8
 8003198:	200007f4 	.word	0x200007f4
 800319c:	200007e0 	.word	0x200007e0
 80031a0:	200007d8 	.word	0x200007d8

080031a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <vTaskSuspendAll+0x18>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	4a03      	ldr	r2, [pc, #12]	; (80031bc <vTaskSuspendAll+0x18>)
 80031b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	200007fc 	.word	0x200007fc

080031c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <xTaskResumeAll+0x114>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <xTaskResumeAll+0x2c>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	603b      	str	r3, [r7, #0]
}
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031ec:	f001 f9ba 	bl	8004564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031f0:	4b38      	ldr	r3, [pc, #224]	; (80032d4 <xTaskResumeAll+0x114>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	4a37      	ldr	r2, [pc, #220]	; (80032d4 <xTaskResumeAll+0x114>)
 80031f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031fa:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <xTaskResumeAll+0x114>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d161      	bne.n	80032c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003202:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <xTaskResumeAll+0x118>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d05d      	beq.n	80032c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800320a:	e02e      	b.n	800326a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800320c:	4b33      	ldr	r3, [pc, #204]	; (80032dc <xTaskResumeAll+0x11c>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3318      	adds	r3, #24
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f883 	bl	8002324 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3304      	adds	r3, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f87e 	bl	8002324 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2201      	movs	r2, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <xTaskResumeAll+0x120>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4313      	orrs	r3, r2
 8003236:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <xTaskResumeAll+0x120>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <xTaskResumeAll+0x124>)
 8003248:	441a      	add	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff f80a 	bl	800226a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <xTaskResumeAll+0x128>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <xTaskResumeAll+0x12c>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <xTaskResumeAll+0x11c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1cc      	bne.n	800320c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003278:	f000 fb4e 	bl	8003918 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <xTaskResumeAll+0x130>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003288:	f000 f846 	bl	8003318 <xTaskIncrementTick>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <xTaskResumeAll+0x12c>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f1      	bne.n	8003288 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <xTaskResumeAll+0x130>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <xTaskResumeAll+0x12c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032b2:	2301      	movs	r3, #1
 80032b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <xTaskResumeAll+0x134>)
 80032b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032c6:	f001 f97d 	bl	80045c4 <vPortExitCritical>

	return xAlreadyYielded;
 80032ca:	68bb      	ldr	r3, [r7, #8]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200007fc 	.word	0x200007fc
 80032d8:	200007d4 	.word	0x200007d4
 80032dc:	20000794 	.word	0x20000794
 80032e0:	200007dc 	.word	0x200007dc
 80032e4:	200006d8 	.word	0x200006d8
 80032e8:	200006d4 	.word	0x200006d4
 80032ec:	200007e8 	.word	0x200007e8
 80032f0:	200007e4 	.word	0x200007e4
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <xTaskGetTickCount+0x1c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003304:	687b      	ldr	r3, [r7, #4]
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	200007d8 	.word	0x200007d8

08003318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003322:	4b4e      	ldr	r3, [pc, #312]	; (800345c <xTaskIncrementTick+0x144>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 808e 	bne.w	8003448 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <xTaskIncrementTick+0x148>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3301      	adds	r3, #1
 8003332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003334:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <xTaskIncrementTick+0x148>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d120      	bne.n	8003382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <xTaskIncrementTick+0x14c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <xTaskIncrementTick+0x48>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	603b      	str	r3, [r7, #0]
}
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskIncrementTick+0x46>
 8003360:	4b40      	ldr	r3, [pc, #256]	; (8003464 <xTaskIncrementTick+0x14c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b40      	ldr	r3, [pc, #256]	; (8003468 <xTaskIncrementTick+0x150>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3e      	ldr	r2, [pc, #248]	; (8003464 <xTaskIncrementTick+0x14c>)
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4a3e      	ldr	r2, [pc, #248]	; (8003468 <xTaskIncrementTick+0x150>)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b3d      	ldr	r3, [pc, #244]	; (800346c <xTaskIncrementTick+0x154>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a3c      	ldr	r2, [pc, #240]	; (800346c <xTaskIncrementTick+0x154>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	f000 facb 	bl	8003918 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <xTaskIncrementTick+0x158>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	d348      	bcc.n	800341e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800338c:	4b35      	ldr	r3, [pc, #212]	; (8003464 <xTaskIncrementTick+0x14c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <xTaskIncrementTick+0x158>)
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	601a      	str	r2, [r3, #0]
					break;
 800339e:	e03e      	b.n	800341e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a0:	4b30      	ldr	r3, [pc, #192]	; (8003464 <xTaskIncrementTick+0x14c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d203      	bcs.n	80033c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033b8:	4a2d      	ldr	r2, [pc, #180]	; (8003470 <xTaskIncrementTick+0x158>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033be:	e02e      	b.n	800341e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe ffad 	bl	8002324 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3318      	adds	r3, #24
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe ffa4 	bl	8002324 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <xTaskIncrementTick+0x15c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	4a22      	ldr	r2, [pc, #136]	; (8003474 <xTaskIncrementTick+0x15c>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <xTaskIncrementTick+0x160>)
 80033fc:	441a      	add	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f7fe ff30 	bl	800226a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340e:	4b1b      	ldr	r3, [pc, #108]	; (800347c <xTaskIncrementTick+0x164>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d3b9      	bcc.n	800338c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800341c:	e7b6      	b.n	800338c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <xTaskIncrementTick+0x164>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4914      	ldr	r1, [pc, #80]	; (8003478 <xTaskIncrementTick+0x160>)
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d901      	bls.n	800343a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003436:	2301      	movs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <xTaskIncrementTick+0x168>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003442:	2301      	movs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e004      	b.n	8003452 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <xTaskIncrementTick+0x16c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <xTaskIncrementTick+0x16c>)
 8003450:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003452:	697b      	ldr	r3, [r7, #20]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200007fc 	.word	0x200007fc
 8003460:	200007d8 	.word	0x200007d8
 8003464:	2000078c 	.word	0x2000078c
 8003468:	20000790 	.word	0x20000790
 800346c:	200007ec 	.word	0x200007ec
 8003470:	200007f4 	.word	0x200007f4
 8003474:	200007dc 	.word	0x200007dc
 8003478:	200006d8 	.word	0x200006d8
 800347c:	200006d4 	.word	0x200006d4
 8003480:	200007e8 	.word	0x200007e8
 8003484:	200007e4 	.word	0x200007e4

08003488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <vTaskSwitchContext+0xa4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <vTaskSwitchContext+0xa8>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800349c:	e03f      	b.n	800351e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <vTaskSwitchContext+0xa8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <vTaskSwitchContext+0xac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	f1c3 031f 	rsb	r3, r3, #31
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	491f      	ldr	r1, [pc, #124]	; (8003538 <vTaskSwitchContext+0xb0>)
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	607b      	str	r3, [r7, #4]
}
 80034e0:	bf00      	nop
 80034e2:	e7fe      	b.n	80034e2 <vTaskSwitchContext+0x5a>
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <vTaskSwitchContext+0xb0>)
 80034f0:	4413      	add	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	3308      	adds	r3, #8
 8003506:	429a      	cmp	r2, r3
 8003508:	d104      	bne.n	8003514 <vTaskSwitchContext+0x8c>
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <vTaskSwitchContext+0xb4>)
 800351c:	6013      	str	r3, [r2, #0]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200007fc 	.word	0x200007fc
 8003530:	200007e8 	.word	0x200007e8
 8003534:	200007dc 	.word	0x200007dc
 8003538:	200006d8 	.word	0x200006d8
 800353c:	200006d4 	.word	0x200006d4

08003540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	60fb      	str	r3, [r7, #12]
}
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <vTaskPlaceOnEventList+0x44>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3318      	adds	r3, #24
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe fe9f 	bl	80022b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003574:	2101      	movs	r1, #1
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f000 fa92 	bl	8003aa0 <prvAddCurrentTaskToDelayedList>
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	200006d4 	.word	0x200006d4

08003588 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	617b      	str	r3, [r7, #20]
}
 80035ac:	bf00      	nop
 80035ae:	e7fe      	b.n	80035ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <vTaskPlaceOnEventListRestricted+0x54>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3318      	adds	r3, #24
 80035b6:	4619      	mov	r1, r3
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7fe fe56 	bl	800226a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
 80035c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	68b8      	ldr	r0, [r7, #8]
 80035ce:	f000 fa67 	bl	8003aa0 <prvAddCurrentTaskToDelayedList>
	}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200006d4 	.word	0x200006d4

080035e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	60fb      	str	r3, [r7, #12]
}
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	3318      	adds	r3, #24
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fe87 	bl	8002324 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003616:	4b1d      	ldr	r3, [pc, #116]	; (800368c <xTaskRemoveFromEventList+0xac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11c      	bne.n	8003658 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	3304      	adds	r3, #4
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fe7e 	bl	8002324 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2201      	movs	r2, #1
 800362e:	409a      	lsls	r2, r3
 8003630:	4b17      	ldr	r3, [pc, #92]	; (8003690 <xTaskRemoveFromEventList+0xb0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4313      	orrs	r3, r2
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <xTaskRemoveFromEventList+0xb0>)
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4a13      	ldr	r2, [pc, #76]	; (8003694 <xTaskRemoveFromEventList+0xb4>)
 8003648:	441a      	add	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	3304      	adds	r3, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f7fe fe0a 	bl	800226a <vListInsertEnd>
 8003656:	e005      	b.n	8003664 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3318      	adds	r3, #24
 800365c:	4619      	mov	r1, r3
 800365e:	480e      	ldr	r0, [pc, #56]	; (8003698 <xTaskRemoveFromEventList+0xb8>)
 8003660:	f7fe fe03 	bl	800226a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <xTaskRemoveFromEventList+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	429a      	cmp	r2, r3
 8003670:	d905      	bls.n	800367e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003672:	2301      	movs	r3, #1
 8003674:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <xTaskRemoveFromEventList+0xc0>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e001      	b.n	8003682 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003682:	697b      	ldr	r3, [r7, #20]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200007fc 	.word	0x200007fc
 8003690:	200007dc 	.word	0x200007dc
 8003694:	200006d8 	.word	0x200006d8
 8003698:	20000794 	.word	0x20000794
 800369c:	200006d4 	.word	0x200006d4
 80036a0:	200007e8 	.word	0x200007e8

080036a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <vTaskInternalSetTimeOutState+0x24>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <vTaskInternalSetTimeOutState+0x28>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	605a      	str	r2, [r3, #4]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	200007ec 	.word	0x200007ec
 80036cc:	200007d8 	.word	0x200007d8

080036d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	613b      	str	r3, [r7, #16]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	60fb      	str	r3, [r7, #12]
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003712:	f000 ff27 	bl	8004564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <xTaskCheckForTimeOut+0xbc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d102      	bne.n	8003736 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	e023      	b.n	800377e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <xTaskCheckForTimeOut+0xc0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d007      	beq.n	8003752 <xTaskCheckForTimeOut+0x82>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e015      	b.n	800377e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	d20b      	bcs.n	8003774 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad2      	subs	r2, r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff9b 	bl	80036a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e004      	b.n	800377e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800377a:	2301      	movs	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800377e:	f000 ff21 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 8003782:	69fb      	ldr	r3, [r7, #28]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200007d8 	.word	0x200007d8
 8003790:	200007ec 	.word	0x200007ec

08003794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <vTaskMissedYield+0x14>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	200007e8 	.word	0x200007e8

080037ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037b4:	f000 f852 	bl	800385c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <prvIdleTask+0x28>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d9f9      	bls.n	80037b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <prvIdleTask+0x2c>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037d0:	e7f0      	b.n	80037b4 <prvIdleTask+0x8>
 80037d2:	bf00      	nop
 80037d4:	200006d8 	.word	0x200006d8
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	e00c      	b.n	8003802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <prvInitialiseTaskLists+0x60>)
 80037f4:	4413      	add	r3, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fd0a 	bl	8002210 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3301      	adds	r3, #1
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b06      	cmp	r3, #6
 8003806:	d9ef      	bls.n	80037e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003808:	480d      	ldr	r0, [pc, #52]	; (8003840 <prvInitialiseTaskLists+0x64>)
 800380a:	f7fe fd01 	bl	8002210 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800380e:	480d      	ldr	r0, [pc, #52]	; (8003844 <prvInitialiseTaskLists+0x68>)
 8003810:	f7fe fcfe 	bl	8002210 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003814:	480c      	ldr	r0, [pc, #48]	; (8003848 <prvInitialiseTaskLists+0x6c>)
 8003816:	f7fe fcfb 	bl	8002210 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800381a:	480c      	ldr	r0, [pc, #48]	; (800384c <prvInitialiseTaskLists+0x70>)
 800381c:	f7fe fcf8 	bl	8002210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003820:	480b      	ldr	r0, [pc, #44]	; (8003850 <prvInitialiseTaskLists+0x74>)
 8003822:	f7fe fcf5 	bl	8002210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <prvInitialiseTaskLists+0x78>)
 8003828:	4a05      	ldr	r2, [pc, #20]	; (8003840 <prvInitialiseTaskLists+0x64>)
 800382a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <prvInitialiseTaskLists+0x7c>)
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <prvInitialiseTaskLists+0x68>)
 8003830:	601a      	str	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200006d8 	.word	0x200006d8
 8003840:	20000764 	.word	0x20000764
 8003844:	20000778 	.word	0x20000778
 8003848:	20000794 	.word	0x20000794
 800384c:	200007a8 	.word	0x200007a8
 8003850:	200007c0 	.word	0x200007c0
 8003854:	2000078c 	.word	0x2000078c
 8003858:	20000790 	.word	0x20000790

0800385c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003862:	e019      	b.n	8003898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003864:	f000 fe7e 	bl	8004564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003868:	4b10      	ldr	r3, [pc, #64]	; (80038ac <prvCheckTasksWaitingTermination+0x50>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fd55 	bl	8002324 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <prvCheckTasksWaitingTermination+0x54>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3b01      	subs	r3, #1
 8003880:	4a0b      	ldr	r2, [pc, #44]	; (80038b0 <prvCheckTasksWaitingTermination+0x54>)
 8003882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <prvCheckTasksWaitingTermination+0x58>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3b01      	subs	r3, #1
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <prvCheckTasksWaitingTermination+0x58>)
 800388c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800388e:	f000 fe99 	bl	80045c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f810 	bl	80038b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <prvCheckTasksWaitingTermination+0x58>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e1      	bne.n	8003864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200007a8 	.word	0x200007a8
 80038b0:	200007d4 	.word	0x200007d4
 80038b4:	200007bc 	.word	0x200007bc

080038b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 f836 	bl	8004940 <vPortFree>
				vPortFree( pxTCB );
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f001 f833 	bl	8004940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038da:	e018      	b.n	800390e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d103      	bne.n	80038ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f001 f82a 	bl	8004940 <vPortFree>
	}
 80038ec:	e00f      	b.n	800390e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d00a      	beq.n	800390e <prvDeleteTCB+0x56>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60fb      	str	r3, [r7, #12]
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <prvDeleteTCB+0x54>
	}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <prvResetNextTaskUnblockTime+0x38>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvResetNextTaskUnblockTime+0x3c>)
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003930:	e008      	b.n	8003944 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <prvResetNextTaskUnblockTime+0x38>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a04      	ldr	r2, [pc, #16]	; (8003954 <prvResetNextTaskUnblockTime+0x3c>)
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	2000078c 	.word	0x2000078c
 8003954:	200007f4 	.word	0x200007f4

08003958 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <xTaskGetSchedulerState+0x34>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003966:	2301      	movs	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	e008      	b.n	800397e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <xTaskGetSchedulerState+0x38>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003974:	2302      	movs	r3, #2
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	e001      	b.n	800397e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800397e:	687b      	ldr	r3, [r7, #4]
	}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	200007e0 	.word	0x200007e0
 8003990:	200007fc 	.word	0x200007fc

08003994 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d06e      	beq.n	8003a88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039aa:	4b3a      	ldr	r3, [pc, #232]	; (8003a94 <xTaskPriorityDisinherit+0x100>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d00a      	beq.n	80039ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60fb      	str	r3, [r7, #12]
}
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10a      	bne.n	80039e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	60bb      	str	r3, [r7, #8]
}
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d044      	beq.n	8003a88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d140      	bne.n	8003a88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fc8a 	bl	8002324 <uxListRemove>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d115      	bne.n	8003a42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1a:	491f      	ldr	r1, [pc, #124]	; (8003a98 <xTaskPriorityDisinherit+0x104>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xTaskPriorityDisinherit+0xae>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	2201      	movs	r2, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <xTaskPriorityDisinherit+0x108>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <xTaskPriorityDisinherit+0x108>)
 8003a40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	f1c3 0207 	rsb	r2, r3, #7
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <xTaskPriorityDisinherit+0x108>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <xTaskPriorityDisinherit+0x108>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <xTaskPriorityDisinherit+0x104>)
 8003a76:	441a      	add	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f7fe fbf3 	bl	800226a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a88:	697b      	ldr	r3, [r7, #20]
	}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200006d4 	.word	0x200006d4
 8003a98:	200006d8 	.word	0x200006d8
 8003a9c:	200007dc 	.word	0x200007dc

08003aa0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fc34 	bl	8002324 <uxListRemove>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2201      	movs	r2, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ad8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d10a      	bne.n	8003af8 <prvAddCurrentTaskToDelayedList+0x58>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	481a      	ldr	r0, [pc, #104]	; (8003b5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003af2:	f7fe fbba 	bl	800226a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003af6:	e026      	b.n	8003b46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d209      	bcs.n	8003b24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f7fe fbc8 	bl	80022b2 <vListInsert>
}
 8003b22:	e010      	b.n	8003b46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fe fbbe 	bl	80022b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d202      	bcs.n	8003b46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b40:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6013      	str	r3, [r2, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200007d8 	.word	0x200007d8
 8003b54:	200006d4 	.word	0x200006d4
 8003b58:	200007dc 	.word	0x200007dc
 8003b5c:	200007c0 	.word	0x200007c0
 8003b60:	20000790 	.word	0x20000790
 8003b64:	2000078c 	.word	0x2000078c
 8003b68:	200007f4 	.word	0x200007f4

08003b6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b76:	f000 fb85 	bl	8004284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <xTimerCreateTimerTask+0x80>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d021      	beq.n	8003bc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b8a:	1d3a      	adds	r2, r7, #4
 8003b8c:	f107 0108 	add.w	r1, r7, #8
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc fcb9 	bl	800050c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	9202      	str	r2, [sp, #8]
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	460a      	mov	r2, r1
 8003bac:	4910      	ldr	r1, [pc, #64]	; (8003bf0 <xTimerCreateTimerTask+0x84>)
 8003bae:	4811      	ldr	r0, [pc, #68]	; (8003bf4 <xTimerCreateTimerTask+0x88>)
 8003bb0:	f7ff f8ca 	bl	8002d48 <xTaskCreateStatic>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <xTimerCreateTimerTask+0x8c>)
 8003bb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <xTimerCreateTimerTask+0x8c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	613b      	str	r3, [r7, #16]
}
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003be2:	697b      	ldr	r3, [r7, #20]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000830 	.word	0x20000830
 8003bf0:	08004c8c 	.word	0x08004c8c
 8003bf4:	08003e65 	.word	0x08003e65
 8003bf8:	20000834 	.word	0x20000834

08003bfc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003c0a:	2028      	movs	r0, #40	; 0x28
 8003c0c:	f000 fdcc 	bl	80047a8 <pvPortMalloc>
 8003c10:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f843 	bl	8003cba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003c34:	697b      	ldr	r3, [r7, #20]
	}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b08a      	sub	sp, #40	; 0x28
 8003c42:	af02      	add	r7, sp, #8
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003c4c:	2328      	movs	r3, #40	; 0x28
 8003c4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b28      	cmp	r3, #40	; 0x28
 8003c54:	d00a      	beq.n	8003c6c <xTimerCreateStatic+0x2e>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	61bb      	str	r3, [r7, #24]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xTimerCreateStatic+0x4c>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	617b      	str	r3, [r7, #20]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00d      	beq.n	8003cb0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f805 	bl	8003cba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
	}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	617b      	str	r3, [r7, #20]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01e      	beq.n	8003d28 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003cea:	f000 facb 	bl	8004284 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	6a3a      	ldr	r2, [r7, #32]
 8003d04:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe faa0 	bl	8002250 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d008      	beq.n	8003d28 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d1c:	f043 0304 	orr.w	r3, r3, #4
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003d28:	bf00      	nop
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	623b      	str	r3, [r7, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <xTimerGenericCommand+0x98>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02a      	beq.n	8003dbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	dc18      	bgt.n	8003daa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d78:	f7ff fdee 	bl	8003958 <xTaskGetSchedulerState>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d109      	bne.n	8003d96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <xTimerGenericCommand+0x98>)
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	f107 0114 	add.w	r1, r7, #20
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8e:	f7fe fbf3 	bl	8002578 <xQueueGenericSend>
 8003d92:	6278      	str	r0, [r7, #36]	; 0x24
 8003d94:	e012      	b.n	8003dbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <xTimerGenericCommand+0x98>)
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	f107 0114 	add.w	r1, r7, #20
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2200      	movs	r2, #0
 8003da2:	f7fe fbe9 	bl	8002578 <xQueueGenericSend>
 8003da6:	6278      	str	r0, [r7, #36]	; 0x24
 8003da8:	e008      	b.n	8003dbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <xTimerGenericCommand+0x98>)
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	f107 0114 	add.w	r1, r7, #20
 8003db2:	2300      	movs	r3, #0
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	f7fe fcdd 	bl	8002774 <xQueueGenericSendFromISR>
 8003dba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3728      	adds	r7, #40	; 0x28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000830 	.word	0x20000830

08003dcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd6:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <prvProcessExpiredTimer+0x94>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fa9d 	bl	8002324 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d022      	beq.n	8003e3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	18d1      	adds	r1, r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	6978      	ldr	r0, [r7, #20]
 8003e06:	f000 f8d1 	bl	8003fac <prvInsertTimerInActiveList>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01f      	beq.n	8003e50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e10:	2300      	movs	r3, #0
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2300      	movs	r3, #0
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	2100      	movs	r1, #0
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f7ff ff88 	bl	8003d30 <xTimerGenericCommand>
 8003e20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d113      	bne.n	8003e50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	60fb      	str	r3, [r7, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	6978      	ldr	r0, [r7, #20]
 8003e56:	4798      	blx	r3
}
 8003e58:	bf00      	nop
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000828 	.word	0x20000828

08003e64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f857 	bl	8003f24 <prvGetNextExpireTime>
 8003e76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f803 	bl	8003e88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e82:	f000 f8d5 	bl	8004030 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e86:	e7f1      	b.n	8003e6c <prvTimerTask+0x8>

08003e88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e92:	f7ff f987 	bl	80031a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e96:	f107 0308 	add.w	r3, r7, #8
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f866 	bl	8003f6c <prvSampleTimeNow>
 8003ea0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d130      	bne.n	8003f0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <prvProcessTimerOrBlockTask+0x3c>
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d806      	bhi.n	8003ec4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003eb6:	f7ff f983 	bl	80031c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ff85 	bl	8003dcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ec2:	e024      	b.n	8003f0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <prvProcessTimerOrBlockTask+0x90>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <prvProcessTimerOrBlockTask+0x50>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <prvProcessTimerOrBlockTask+0x52>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <prvProcessTimerOrBlockTask+0x94>)
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f7fe fef9 	bl	8002ce0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003eee:	f7ff f967 	bl	80031c0 <xTaskResumeAll>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <prvProcessTimerOrBlockTask+0x98>)
 8003efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	f3bf 8f6f 	isb	sy
}
 8003f08:	e001      	b.n	8003f0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f0a:	f7ff f959 	bl	80031c0 <xTaskResumeAll>
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	2000082c 	.word	0x2000082c
 8003f1c:	20000830 	.word	0x20000830
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <prvGetNextExpireTime+0x44>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <prvGetNextExpireTime+0x16>
 8003f36:	2201      	movs	r2, #1
 8003f38:	e000      	b.n	8003f3c <prvGetNextExpireTime+0x18>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <prvGetNextExpireTime+0x44>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e001      	b.n	8003f58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f58:	68fb      	ldr	r3, [r7, #12]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000828 	.word	0x20000828

08003f6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f74:	f7ff f9c0 	bl	80032f8 <xTaskGetTickCount>
 8003f78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <prvSampleTimeNow+0x3c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d205      	bcs.n	8003f90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f84:	f000 f91a 	bl	80041bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e002      	b.n	8003f96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f96:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <prvSampleTimeNow+0x3c>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000838 	.word	0x20000838

08003fac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d812      	bhi.n	8003ff8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	1ad2      	subs	r2, r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d302      	bcc.n	8003fe6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	e01b      	b.n	800401e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <prvInsertTimerInActiveList+0x7c>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7fe f95e 	bl	80022b2 <vListInsert>
 8003ff6:	e012      	b.n	800401e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d206      	bcs.n	800400e <prvInsertTimerInActiveList+0x62>
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d302      	bcc.n	800400e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e007      	b.n	800401e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <prvInsertTimerInActiveList+0x80>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f7fe f94a 	bl	80022b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800401e:	697b      	ldr	r3, [r7, #20]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	2000082c 	.word	0x2000082c
 800402c:	20000828 	.word	0x20000828

08004030 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	; 0x30
 8004034:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004036:	e0ae      	b.n	8004196 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f2c0 80aa 	blt.w	8004194 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe f967 	bl	8002324 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff87 	bl	8003f6c <prvSampleTimeNow>
 800405e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b09      	cmp	r3, #9
 8004064:	f200 8097 	bhi.w	8004196 <prvProcessReceivedCommands+0x166>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <prvProcessReceivedCommands+0x40>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004099 	.word	0x08004099
 8004074:	08004099 	.word	0x08004099
 8004078:	08004099 	.word	0x08004099
 800407c:	0800410d 	.word	0x0800410d
 8004080:	08004121 	.word	0x08004121
 8004084:	0800416b 	.word	0x0800416b
 8004088:	08004099 	.word	0x08004099
 800408c:	08004099 	.word	0x08004099
 8004090:	0800410d 	.word	0x0800410d
 8004094:	08004121 	.word	0x08004121
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	18d1      	adds	r1, r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a3a      	ldr	r2, [r7, #32]
 80040b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040b8:	f7ff ff78 	bl	8003fac <prvInsertTimerInActiveList>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d069      	beq.n	8004196 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d05e      	beq.n	8004196 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	441a      	add	r2, r3
 80040e0:	2300      	movs	r3, #0
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2300      	movs	r3, #0
 80040e6:	2100      	movs	r1, #0
 80040e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ea:	f7ff fe21 	bl	8003d30 <xTimerGenericCommand>
 80040ee:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d14f      	bne.n	8004196 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	61bb      	str	r3, [r7, #24]
}
 8004108:	bf00      	nop
 800410a:	e7fe      	b.n	800410a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	b2da      	uxtb	r2, r3
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800411e:	e03a      	b.n	8004196 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	617b      	str	r3, [r7, #20]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	18d1      	adds	r1, r2, r3
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004164:	f7ff ff22 	bl	8003fac <prvInsertTimerInActiveList>
					break;
 8004168:	e015      	b.n	8004196 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800417a:	f000 fbe1 	bl	8004940 <vPortFree>
 800417e:	e00a      	b.n	8004196 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004192:	e000      	b.n	8004196 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <prvProcessReceivedCommands+0x188>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f107 0108 	add.w	r1, r7, #8
 800419e:	2200      	movs	r2, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fb83 	bl	80028ac <xQueueReceive>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f47f af45 	bne.w	8004038 <prvProcessReceivedCommands+0x8>
	}
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000830 	.word	0x20000830

080041bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041c2:	e048      	b.n	8004256 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041c4:	4b2d      	ldr	r3, [pc, #180]	; (800427c <prvSwitchTimerLists+0xc0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <prvSwitchTimerLists+0xc0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3304      	adds	r3, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe f8a1 	bl	8002324 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02e      	beq.n	8004256 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	429a      	cmp	r2, r3
 8004208:	d90e      	bls.n	8004228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004216:	4b19      	ldr	r3, [pc, #100]	; (800427c <prvSwitchTimerLists+0xc0>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3304      	adds	r3, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fe f846 	bl	80022b2 <vListInsert>
 8004226:	e016      	b.n	8004256 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004228:	2300      	movs	r3, #0
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2300      	movs	r3, #0
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	2100      	movs	r1, #0
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff fd7c 	bl	8003d30 <xTimerGenericCommand>
 8004238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	603b      	str	r3, [r7, #0]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <prvSwitchTimerLists+0xc0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1b1      	bne.n	80041c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <prvSwitchTimerLists+0xc0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <prvSwitchTimerLists+0xc4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <prvSwitchTimerLists+0xc0>)
 800426c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800426e:	4a04      	ldr	r2, [pc, #16]	; (8004280 <prvSwitchTimerLists+0xc4>)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000828 	.word	0x20000828
 8004280:	2000082c 	.word	0x2000082c

08004284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800428a:	f000 f96b 	bl	8004564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <prvCheckForValidListAndQueue+0x60>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d120      	bne.n	80042d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004296:	4814      	ldr	r0, [pc, #80]	; (80042e8 <prvCheckForValidListAndQueue+0x64>)
 8004298:	f7fd ffba 	bl	8002210 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800429c:	4813      	ldr	r0, [pc, #76]	; (80042ec <prvCheckForValidListAndQueue+0x68>)
 800429e:	f7fd ffb7 	bl	8002210 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <prvCheckForValidListAndQueue+0x6c>)
 80042a4:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <prvCheckForValidListAndQueue+0x64>)
 80042a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <prvCheckForValidListAndQueue+0x70>)
 80042aa:	4a10      	ldr	r2, [pc, #64]	; (80042ec <prvCheckForValidListAndQueue+0x68>)
 80042ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042ae:	2300      	movs	r3, #0
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <prvCheckForValidListAndQueue+0x74>)
 80042b4:	4a11      	ldr	r2, [pc, #68]	; (80042fc <prvCheckForValidListAndQueue+0x78>)
 80042b6:	210c      	movs	r1, #12
 80042b8:	200a      	movs	r0, #10
 80042ba:	f7fe f8c5 	bl	8002448 <xQueueGenericCreateStatic>
 80042be:	4603      	mov	r3, r0
 80042c0:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <prvCheckForValidListAndQueue+0x60>)
 80042c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <prvCheckForValidListAndQueue+0x60>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <prvCheckForValidListAndQueue+0x60>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	490b      	ldr	r1, [pc, #44]	; (8004300 <prvCheckForValidListAndQueue+0x7c>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fcda 	bl	8002c8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042d8:	f000 f974 	bl	80045c4 <vPortExitCritical>
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000830 	.word	0x20000830
 80042e8:	20000800 	.word	0x20000800
 80042ec:	20000814 	.word	0x20000814
 80042f0:	20000828 	.word	0x20000828
 80042f4:	2000082c 	.word	0x2000082c
 80042f8:	200008b4 	.word	0x200008b4
 80042fc:	2000083c 	.word	0x2000083c
 8004300:	08004c94 	.word	0x08004c94

08004304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b04      	subs	r3, #4
 8004314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800431c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3b04      	subs	r3, #4
 8004322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b04      	subs	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004334:	4a0c      	ldr	r2, [pc, #48]	; (8004368 <pxPortInitialiseStack+0x64>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b14      	subs	r3, #20
 800433e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b04      	subs	r3, #4
 800434a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f06f 0202 	mvn.w	r2, #2
 8004352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b20      	subs	r3, #32
 8004358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800435a:	68fb      	ldr	r3, [r7, #12]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	0800436d 	.word	0x0800436d

0800436c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <prvTaskExitError+0x54>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d00a      	beq.n	8004396 <prvTaskExitError+0x2a>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	60fb      	str	r3, [r7, #12]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <prvTaskExitError+0x28>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	60bb      	str	r3, [r7, #8]
}
 80043a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043aa:	bf00      	nop
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0fc      	beq.n	80043ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	2000000c 	.word	0x2000000c
	...

080043d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <pxCurrentTCBConst2>)
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	6808      	ldr	r0, [r1, #0]
 80043d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	f380 8809 	msr	PSP, r0
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f380 8811 	msr	BASEPRI, r0
 80043ea:	4770      	bx	lr
 80043ec:	f3af 8000 	nop.w

080043f0 <pxCurrentTCBConst2>:
 80043f0:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043f8:	4808      	ldr	r0, [pc, #32]	; (800441c <prvPortStartFirstTask+0x24>)
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	6800      	ldr	r0, [r0, #0]
 80043fe:	f380 8808 	msr	MSP, r0
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f380 8814 	msr	CONTROL, r0
 800440a:	b662      	cpsie	i
 800440c:	b661      	cpsie	f
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	df00      	svc	0
 8004418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800441a:	bf00      	nop
 800441c:	e000ed08 	.word	0xe000ed08

08004420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004426:	4b46      	ldr	r3, [pc, #280]	; (8004540 <xPortStartScheduler+0x120>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a46      	ldr	r2, [pc, #280]	; (8004544 <xPortStartScheduler+0x124>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10a      	bne.n	8004446 <xPortStartScheduler+0x26>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	613b      	str	r3, [r7, #16]
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004446:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <xPortStartScheduler+0x120>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a3f      	ldr	r2, [pc, #252]	; (8004548 <xPortStartScheduler+0x128>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10a      	bne.n	8004466 <xPortStartScheduler+0x46>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	60fb      	str	r3, [r7, #12]
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004466:	4b39      	ldr	r3, [pc, #228]	; (800454c <xPortStartScheduler+0x12c>)
 8004468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	22ff      	movs	r2, #255	; 0xff
 8004476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <xPortStartScheduler+0x130>)
 800448c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800448e:	4b31      	ldr	r3, [pc, #196]	; (8004554 <xPortStartScheduler+0x134>)
 8004490:	2207      	movs	r2, #7
 8004492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004494:	e009      	b.n	80044aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004496:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <xPortStartScheduler+0x134>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3b01      	subs	r3, #1
 800449c:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <xPortStartScheduler+0x134>)
 800449e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d0ef      	beq.n	8004496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <xPortStartScheduler+0x134>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1c3 0307 	rsb	r3, r3, #7
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d00a      	beq.n	80044d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	60bb      	str	r3, [r7, #8]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044d8:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <xPortStartScheduler+0x134>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <xPortStartScheduler+0x134>)
 80044e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <xPortStartScheduler+0x134>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044ea:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <xPortStartScheduler+0x134>)
 80044ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044f6:	4b18      	ldr	r3, [pc, #96]	; (8004558 <xPortStartScheduler+0x138>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a17      	ldr	r2, [pc, #92]	; (8004558 <xPortStartScheduler+0x138>)
 80044fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <xPortStartScheduler+0x138>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a14      	ldr	r2, [pc, #80]	; (8004558 <xPortStartScheduler+0x138>)
 8004508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800450c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800450e:	f000 f8dd 	bl	80046cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <xPortStartScheduler+0x13c>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004518:	f000 f8fc 	bl	8004714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800451c:	4b10      	ldr	r3, [pc, #64]	; (8004560 <xPortStartScheduler+0x140>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <xPortStartScheduler+0x140>)
 8004522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004528:	f7ff ff66 	bl	80043f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800452c:	f7fe ffac 	bl	8003488 <vTaskSwitchContext>
	prvTaskExitError();
 8004530:	f7ff ff1c 	bl	800436c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	e000ed00 	.word	0xe000ed00
 8004544:	410fc271 	.word	0x410fc271
 8004548:	410fc270 	.word	0x410fc270
 800454c:	e000e400 	.word	0xe000e400
 8004550:	200008fc 	.word	0x200008fc
 8004554:	20000900 	.word	0x20000900
 8004558:	e000ed20 	.word	0xe000ed20
 800455c:	2000000c 	.word	0x2000000c
 8004560:	e000ef34 	.word	0xe000ef34

08004564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	607b      	str	r3, [r7, #4]
}
 800457c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <vPortEnterCritical+0x58>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <vPortEnterCritical+0x58>)
 8004586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <vPortEnterCritical+0x58>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10f      	bne.n	80045b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <vPortEnterCritical+0x5c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	603b      	str	r3, [r7, #0]
}
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <vPortEnterCritical+0x4a>
	}
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	2000000c 	.word	0x2000000c
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <vPortExitCritical+0x50>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <vPortExitCritical+0x24>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	607b      	str	r3, [r7, #4]
}
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <vPortExitCritical+0x50>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <vPortExitCritical+0x50>)
 80045f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <vPortExitCritical+0x50>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <vPortExitCritical+0x42>
 80045fa:	2300      	movs	r3, #0
 80045fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f383 8811 	msr	BASEPRI, r3
}
 8004604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	2000000c 	.word	0x2000000c
	...

08004620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004620:	f3ef 8009 	mrs	r0, PSP
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <pxCurrentTCBConst>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f01e 0f10 	tst.w	lr, #16
 8004630:	bf08      	it	eq
 8004632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	6010      	str	r0, [r2, #0]
 800463c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004644:	f380 8811 	msr	BASEPRI, r0
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f7fe ff1a 	bl	8003488 <vTaskSwitchContext>
 8004654:	f04f 0000 	mov.w	r0, #0
 8004658:	f380 8811 	msr	BASEPRI, r0
 800465c:	bc09      	pop	{r0, r3}
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	6808      	ldr	r0, [r1, #0]
 8004662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004666:	f01e 0f10 	tst.w	lr, #16
 800466a:	bf08      	it	eq
 800466c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004670:	f380 8809 	msr	PSP, r0
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst>:
 8004680:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
}
 80046a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046a2:	f7fe fe39 	bl	8003318 <xTaskIncrementTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <xPortSysTickHandler+0x40>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f383 8811 	msr	BASEPRI, r3
}
 80046be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <vPortSetupTimerInterrupt+0x34>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <vPortSetupTimerInterrupt+0x38>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <vPortSetupTimerInterrupt+0x3c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <vPortSetupTimerInterrupt+0x40>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <vPortSetupTimerInterrupt+0x44>)
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ee:	4b04      	ldr	r3, [pc, #16]	; (8004700 <vPortSetupTimerInterrupt+0x34>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e010 	.word	0xe000e010
 8004704:	e000e018 	.word	0xe000e018
 8004708:	20000000 	.word	0x20000000
 800470c:	10624dd3 	.word	0x10624dd3
 8004710:	e000e014 	.word	0xe000e014

08004714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004724 <vPortEnableVFP+0x10>
 8004718:	6801      	ldr	r1, [r0, #0]
 800471a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800471e:	6001      	str	r1, [r0, #0]
 8004720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004722:	bf00      	nop
 8004724:	e000ed88 	.word	0xe000ed88

08004728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800472e:	f3ef 8305 	mrs	r3, IPSR
 8004732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b0f      	cmp	r3, #15
 8004738:	d914      	bls.n	8004764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <vPortValidateInterruptPriority+0x70>)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004744:	4b15      	ldr	r3, [pc, #84]	; (800479c <vPortValidateInterruptPriority+0x74>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	7afa      	ldrb	r2, [r7, #11]
 800474a:	429a      	cmp	r2, r3
 800474c:	d20a      	bcs.n	8004764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <vPortValidateInterruptPriority+0x78>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <vPortValidateInterruptPriority+0x7c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d90a      	bls.n	800478a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	603b      	str	r3, [r7, #0]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <vPortValidateInterruptPriority+0x60>
	}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	e000e3f0 	.word	0xe000e3f0
 800479c:	200008fc 	.word	0x200008fc
 80047a0:	e000ed0c 	.word	0xe000ed0c
 80047a4:	20000900 	.word	0x20000900

080047a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047b4:	f7fe fcf6 	bl	80031a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047b8:	4b5b      	ldr	r3, [pc, #364]	; (8004928 <pvPortMalloc+0x180>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047c0:	f000 f920 	bl	8004a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047c4:	4b59      	ldr	r3, [pc, #356]	; (800492c <pvPortMalloc+0x184>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 8093 	bne.w	80048f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01d      	beq.n	8004814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80047d8:	2208      	movs	r2, #8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d014      	beq.n	8004814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f023 0307 	bic.w	r3, r3, #7
 80047f0:	3308      	adds	r3, #8
 80047f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <pvPortMalloc+0x6c>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	617b      	str	r3, [r7, #20]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d06e      	beq.n	80048f8 <pvPortMalloc+0x150>
 800481a:	4b45      	ldr	r3, [pc, #276]	; (8004930 <pvPortMalloc+0x188>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d869      	bhi.n	80048f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004824:	4b43      	ldr	r3, [pc, #268]	; (8004934 <pvPortMalloc+0x18c>)
 8004826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004828:	4b42      	ldr	r3, [pc, #264]	; (8004934 <pvPortMalloc+0x18c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800482e:	e004      	b.n	800483a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d903      	bls.n	800484c <pvPortMalloc+0xa4>
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f1      	bne.n	8004830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800484c:	4b36      	ldr	r3, [pc, #216]	; (8004928 <pvPortMalloc+0x180>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004852:	429a      	cmp	r2, r3
 8004854:	d050      	beq.n	80048f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2208      	movs	r2, #8
 800485c:	4413      	add	r3, r2
 800485e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	2308      	movs	r3, #8
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	429a      	cmp	r2, r3
 8004876:	d91f      	bls.n	80048b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <pvPortMalloc+0xf8>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	613b      	str	r3, [r7, #16]
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048b2:	69b8      	ldr	r0, [r7, #24]
 80048b4:	f000 f908 	bl	8004ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <pvPortMalloc+0x188>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <pvPortMalloc+0x188>)
 80048c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048c6:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <pvPortMalloc+0x188>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <pvPortMalloc+0x190>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d203      	bcs.n	80048da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048d2:	4b17      	ldr	r3, [pc, #92]	; (8004930 <pvPortMalloc+0x188>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a18      	ldr	r2, [pc, #96]	; (8004938 <pvPortMalloc+0x190>)
 80048d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <pvPortMalloc+0x184>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <pvPortMalloc+0x194>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	4a11      	ldr	r2, [pc, #68]	; (800493c <pvPortMalloc+0x194>)
 80048f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048f8:	f7fe fc62 	bl	80031c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <pvPortMalloc+0x174>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60fb      	str	r3, [r7, #12]
}
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <pvPortMalloc+0x172>
	return pvReturn;
 800491c:	69fb      	ldr	r3, [r7, #28]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3728      	adds	r7, #40	; 0x28
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	2000450c 	.word	0x2000450c
 800492c:	20004520 	.word	0x20004520
 8004930:	20004510 	.word	0x20004510
 8004934:	20004504 	.word	0x20004504
 8004938:	20004514 	.word	0x20004514
 800493c:	20004518 	.word	0x20004518

08004940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d04d      	beq.n	80049ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004952:	2308      	movs	r3, #8
 8004954:	425b      	negs	r3, r3
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <vPortFree+0xb8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <vPortFree+0x44>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	60fb      	str	r3, [r7, #12]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <vPortFree+0x62>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	60bb      	str	r3, [r7, #8]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <vPortFree+0xb8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01e      	beq.n	80049ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11a      	bne.n	80049ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <vPortFree+0xb8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	401a      	ands	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049c8:	f7fe fbec 	bl	80031a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <vPortFree+0xbc>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4413      	add	r3, r2
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <vPortFree+0xbc>)
 80049d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049da:	6938      	ldr	r0, [r7, #16]
 80049dc:	f000 f874 	bl	8004ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <vPortFree+0xc0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	4a06      	ldr	r2, [pc, #24]	; (8004a00 <vPortFree+0xc0>)
 80049e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80049ea:	f7fe fbe9 	bl	80031c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049ee:	bf00      	nop
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20004520 	.word	0x20004520
 80049fc:	20004510 	.word	0x20004510
 8004a00:	2000451c 	.word	0x2000451c

08004a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <prvHeapInit+0xac>)
 8004a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3307      	adds	r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <prvHeapInit+0xac>)
 8004a34:	4413      	add	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a3c:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <prvHeapInit+0xb0>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <prvHeapInit+0xb0>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a50:	2208      	movs	r2, #8
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <prvHeapInit+0xb8>)
 8004a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <prvHeapInit+0xbc>)
 8004a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <prvHeapInit+0xc0>)
 8004a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000904 	.word	0x20000904
 8004ab4:	20004504 	.word	0x20004504
 8004ab8:	2000450c 	.word	0x2000450c
 8004abc:	20004514 	.word	0x20004514
 8004ac0:	20004510 	.word	0x20004510
 8004ac4:	20004520 	.word	0x20004520

08004ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <prvInsertBlockIntoFreeList+0xac>)
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e002      	b.n	8004adc <prvInsertBlockIntoFreeList+0x14>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d8f7      	bhi.n	8004ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4413      	add	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d108      	bne.n	8004b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d118      	bne.n	8004b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <prvInsertBlockIntoFreeList+0xb0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d00d      	beq.n	8004b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e008      	b.n	8004b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <prvInsertBlockIntoFreeList+0xb0>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e003      	b.n	8004b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d002      	beq.n	8004b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20004504 	.word	0x20004504
 8004b78:	2000450c 	.word	0x2000450c

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4d0d      	ldr	r5, [pc, #52]	; (8004bb4 <__libc_init_array+0x38>)
 8004b80:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b82:	1b64      	subs	r4, r4, r5
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	2600      	movs	r6, #0
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	4d0b      	ldr	r5, [pc, #44]	; (8004bbc <__libc_init_array+0x40>)
 8004b8e:	4c0c      	ldr	r4, [pc, #48]	; (8004bc0 <__libc_init_array+0x44>)
 8004b90:	f000 f82e 	bl	8004bf0 <_init>
 8004b94:	1b64      	subs	r4, r4, r5
 8004b96:	10a4      	asrs	r4, r4, #2
 8004b98:	2600      	movs	r6, #0
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08004cbc 	.word	0x08004cbc
 8004bb8:	08004cbc 	.word	0x08004cbc
 8004bbc:	08004cbc 	.word	0x08004cbc
 8004bc0:	08004cc0 	.word	0x08004cc0

08004bc4 <memcpy>:
 8004bc4:	440a      	add	r2, r1
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	4770      	bx	lr
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bda:	4291      	cmp	r1, r2
 8004bdc:	d1f9      	bne.n	8004bd2 <memcpy+0xe>
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <memset>:
 8004be0:	4402      	add	r2, r0
 8004be2:	4603      	mov	r3, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d100      	bne.n	8004bea <memset+0xa>
 8004be8:	4770      	bx	lr
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	e7f9      	b.n	8004be4 <memset+0x4>

08004bf0 <_init>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr

08004bfc <_fini>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr
